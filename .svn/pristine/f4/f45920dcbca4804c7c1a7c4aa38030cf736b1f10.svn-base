function nc2ev(ncfile)
%%
% function to convert variables named in the matrix_variable_list to Echoview
% .sv.csv format
% stage 1: export names variable to echoview ascii format
% stage 2: import into an Ev file
%
% Preconditions:
%   full path to variable ncfile is given
%   directory for storing the Echoview outputs will be created based on the
%   path to the variable ncfile. Evfile will also be created in that
%   directory
% 
%   matrix_variable_list is a vector of cell values:- e.g. [{'Sv'}, {'Sv_raw'}
%   if empty (i.e. pass []) then will defer to the hard-coded variable
%   values to plot given below

%% - extract data from ncfile using the utility ncfile (note this function may eventually be built into viz_sv in which case this step would be removed. 
if isequal(nargin,1)
    % default exports
    matrix_variable_list = [{'Sv'}    {'Svraw'}    {'signal_noise'}    {'pg'}]; % i.e. echograms and the like
    vector_variable_list = [{'NASC'},{'NASCraw'},{'background_noise'},{'epipelagic'},{'upper_mesopelagic'},{'lower_mesopelagic'},{'day'}]; % i.e. lines and the like, background noise, epipelagic etc 
end    
template_dir = 'Q:\IMOS_BASOOP\Echoview_NetCDF'; % set this as location to find echoview templates for netCDF format data. 

%% create a folder for the echoview ascii outputs, export if needed, create ev file from exports
    [dir, file] = fileparts(ncfile);
    if ~isdir([dir '\echoview_ascii'])
        mkdir([dir '\echoview_ascii']);
    end
    cd([dir '\echoview_ascii'])
    if isempty(ls([dir '\echoview_ascii'])) 
        %[data] = viz_sv(ncfile,'','noplots','all');
        [data] =  export_to_ascii(ncfile,matrix_variable_list,vector_variable_list);
    else 
        redo = questdlg('Echoview Ascii files already exist, do you want to re-export?','Redo export','Yes','No','Yes');
        if isequal(redo,'Yes')
            [data] = export_to_ascii(ncfile,matrix_variable_list,vector_variable_list);
        end
    end         
    if ~exist('data') % i.e. did not generate this in the previous stepm then will need to rat it out using viz_sv;
        [data] = viz_sv(ncfile,'','noplots','all');
    end
    if isfile([dir '\echoview_ascii\nc.ev'])        
        redoev = questdlg('Echoview file nc.ev already exist, do you want to re-create?','Redo ev file','Yes','No','Yes');
        if isequal(redoev,'Yes')                        
            delete([dir '\echoview_ascii\nc.ev']) % delete the old file
            create_ev_from_ascii([dir '\echoview_ascii'],matrix_variable_list, vector_variable_list,template_dir,data); % call to function to create ev files from exports    
        end
    else        
        create_ev_from_ascii([dir '\echoview_ascii'],matrix_variable_list, vector_variable_list,template_dir,data); % call to function to create ev files from exports    
    end

function [data] = export_to_ascii(ncfile,matrix_variable_list,vector_variable_list);    
    [data] = viz_sv(ncfile,'','noplots','all');       
    [dir, file] = fileparts(ncfile);
    if ~isdir([dir '\echoview_ascii'])
        mkdir([dir '\echoview_ascii']);
    end
    cd([dir '\echoview_ascii'])
    ns = length(data.depth);
    h = (data.depth(end) - data.depth(1)) / (ns-1);
    range = sprintf('%g, %g', data.depth(1) - h/2, data.depth(end) + h/2);    
% % % % % % % % %     for j=1:length(matrix_variable_list)    
% % % % % % % % %         for k=1:length(data.channels)        
% % % % % % % % %             if isequal(length(data.channels),1) % single freq            
% % % % % % % % %                 if eval(['min(size(data.' matrix_variable_list{j} '))']) > 1                        
% % % % % % % % %                    output_file = [matrix_variable_list{j} '_' data.channels{k} '.sv.csv'];
% % % % % % % % %                    fid = fopen(output_file,'w+');
% % % % % % % % %                    output_var = matrix_variable_list{j};
% % % % % % % % %                 end            
% % % % % % % % %             elseif eval(['length(size(data.' matrix_variable_list{j}, '))'])>2                                 
% % % % % % % % %                    output_file = [matrix_variable_list{j} '_' data.channels{k} '.sv.csv'];                
% % % % % % % % %                 fid = fopen(output_file,'w+');
% % % % % % % % %                 output_var = matrix_variable_list{j};            
% % % % % % % % %             end                                     
% % % % % % % % %             fprintf(fid,'Ping_date,Ping_time,Range_start,Range_stop,Sample_count\n');
% % % % % % % % %             for i = 1:length(data.latitude)            
% % % % % % % % %                 dt = datestr(data.time(i), 'yyyy-mm-dd, HH:MM:SS');           
% % % % % % % % %                 Output_data = eval(['{data.' output_var '(:,i,k)};']);                                                         
% % % % % % % % %                 Output_dte = sprintf('%.1f,',Output_data{:});
% % % % % % % % %                 Output_dte = strrep(Output_dte,'-Inf','-999');
% % % % % % % % %                 fprintf(fid,'%s,%s,%d,',...
% % % % % % % % %                     dt,range,ns);            
% % % % % % % % %                 fprintf(fid,'%s',Output_dte(1:end-1));
% % % % % % % % %                 fprintf(fid,'\n');               
% % % % % % % % %             end
% % % % % % % % %             fprintf('exported variable %s\n to %s''\''%s\n',dir,output_var, output_file)        
% % % % % % % % %         end
% % % % % % % % %     end
    % now print out a gps.csv file to same location
        gid = fopen([dir '\echoview_ascii\position.gps.csv'],'w+');
        fprintf(gid, 'GPS_date, GPS_time, Latitude, Longitude\n');
        for i = 1:length(data.latitude)
            dt = datestr(data.time(i), 'yyyy-mm-dd, HH:MM:SS');
            fprintf(gid, '%s, %g, %g\n', dt, data.latitude(i), data.longitude(i));
        end       
        fprintf('Starting line export\n');
        
        for k = 1:length(vector_variable_list)
            if (length(data.channels)>1)
                for i=1:length(data.channels)           
                    vec_var = ['data.' vector_variable_list{k}];
                    if isequal(eval(['length(size(data.' vector_variable_list{k} '))']),3) % we have the three dimensional matrix
                        eval(['fid = fopen(' '''' pwd '\' vector_variable_list{k} '_' data.channels{i}  '.evl'', ''w+'');'])
                        datastr = [vec_var '(1,j,i)']; 
                    elseif length(eval(['data.' vector_variable_list{6} '(:,1)' ])) > 1  & ~isequal(vector_variable_list{k}, 'day')                  
                        eval(['fid = fopen(' '''' pwd '\' vector_variable_list{k} '_' data.channels{i}  '.evl'', ''w+'');'])
                        datastr = [vec_var '(i,j)'];  
                    else  % one dimensional matrix (e.g. day)
                        eval(['fid = fopen(' '''' pwd '\' vector_variable_list{k} '.evl'', ''w+'');'])
                        datastr = [vec_var '(j)']; 
                    end
                    if ~isequal(vector_variable_list{k},'day')
                        s = size(eval(vec_var));         
                        len_dataset = s(2);
                        n = len_dataset;
                    else
                        s = size(eval(vec_var));         
                        len_dataset = s(1);
                        n = len_dataset;
                    end
                        % this loop tallys number of valid rows as there as some inf's
                        % kicking around
                    for j=1:n
                        value = eval(datastr);
                        if isinf(value) | isnan(value)
                           len_dataset = len_dataset-1;
                        end                        
                    end                     
                    fprintf(fid,'EVBD 3 3.00.41\n%d\n',len_dataset);            
                    for j=1:n % i.e. this is the length of the data
                        dt = datestr(data.time(j), 'yyyymmdd HHMMSS0000');                                             
                        value = eval(datastr);
                        if (~isinf(value) | ~isnan(value)) & ~isequal(vector_variable_list{k},'day') % there are some infs around - don't print that line
                            fprintf(fid, '%s %f 1\n',dt, value);                                            
                        end
                        if (~isinf(value) | ~isnan(value)) & isequal(vector_variable_list{k},'day') % there are some infs around - don't print that line                        
                            fprintf(fid, '%s %f 1\n',dt, value*100);                                            
                        end
                    end             
                    fclose(fid);       
                end
            else % handle instance for single frequency                                              
                 vec_var = ['data.' vector_variable_list{k}];
                 datastr = [vec_var '(j)']; 
                 eval(['fid = fopen(' '''' pwd '\' vector_variable_list{k} '.evl'', ''w+'');'])
                 n = length(data.NASC);
                 len_dataset =n;
                 for j=1:n
                     value = eval(datastr);
                     if isinf(value) | isnan(value)
                        len_dataset = len_dataset-1;
                     end                        
                 end       
                 fprintf(fid,'EVBD 3 3.00.41\n%d\n',len_dataset);            
                 for j=1:n % i.e. this is the length of the data
                     dt = datestr(data.time(j), 'yyyymmdd HHMMSS0000');                                             
                     value = eval(datastr);
                     if ~isinf(value) & ~isnan(value)
                        fprintf(fid, '%s %f 1\n',dt, value);
                     end
                 end                
            end               
        end
        fprintf('Finished line exports\n');
    fprintf('Finished exporting netCDF contents to Echoview ascii format\n');
    fprintf('Go to the message box and click the ok button to continue\n');
    fclose all;

    
    

        
%% 
function create_ev_from_ascii(asciidir,matrix_variable_list,vector_variable_list, template_dir,data)
    % use com scripting to create an ev file
    S = dir(fullfile(asciidir,'*.csv'))  ;      
    csvfiles = natsortfiles({S.name});
    %csvfiles = ls([asciidir '\*.csv']);    
    EvApp = actxserver('EchoviewCom.EvApplication');    
    EvFile = EvApp.NewFile;                 
    % sort the csv files for freq and place position variable at the end. 
    new_csvlist = []; position_files = [];    
    for i=1:length(csvfiles)
        csvfile = csvfiles(i);
        if strfind(cell2mat(csvfile),'position')
            position_file = cell2mat(csvfile);
        else
            new_csvlist = [new_csvlist;csvfile];
        end        
    end
    csvfiles = [new_csvlist; position_file];        
    for i=2:length(csvfiles)
        EvFile.Filesets.Add;        
    end
    for i=1:length(csvfiles)
        fileset2add = cell2mat(csvfiles(i));
        dt = strfind(fileset2add,'.');
        fileset2add = fileset2add(1:dt-1);
        EvFile.Filesets.Item(i-1).Name = fileset2add;
        datafile = [asciidir '\' cell2mat(csvfiles(i))];
        EvFile.Filesets.Item(i-1).DataFiles.Add(datafile);
    end
    
    cd(asciidir); 
    clipboard('copy', [asciidir '\ncdata.evd'])        
    instructions = ['\n=====================================================\n' ...
                     'Switch to Echoview\n\n' ...
                     'Open an echogram (does not matter which one)\n\n' ...
                     'From the top menu select Echogram/Export/To Echoview Data File Format\n\n' ...
                     'When the dialog opens "Select All". Do not change quality level (i.e. keep at highest level)\n\n' ...
                     'and then click the "Export ... button"\n\n' ...
                     'I have copied the name of the evd file to the clipboard. Type ctrl-v to paste this in\n\n' ...
                     'to provide the path and filename for evd file\n\n' ...                     
                     'Switch back to Matlab and click "OK" on this dialog when done. Program will continue\n\n'...
                     '====================================================\n'];                    
    uiwait(msgbox(sprintf(instructions,asciidir)));       
    EvFile.Close; %exit this file
                  
    template_sub_dir = 'F';
    for i=1:length(data.channels)
        template_sub_dir = [template_sub_dir '_' data.channels{i}];
    end
    template_sub_dir = strrep(template_sub_dir, 'kHz','');
    EvFile = EvApp.OpenFile([template_dir '\' template_sub_dir '\nc_template.ev']);
    if isempty(EvFile)
         msgbox('ev template file does not exist - need to create this\n');
    else
        EvFile.Filesets.Item(0).DataFiles.RemoveAll;    % get rid to template dummy file
        EvFile.Filesets.Item(0).Datafiles.Add([pwd '\ncdata.evd']); % add the previously exported evd file
    end    
    % add the evlfiles according to named vector variable list. 
    fprintf('Adding line data\n')       
    if (length(data.channels)>1)
        for k = 1:length(vector_variable_list)
            if isequal(vector_variable_list{k},'day')
                try
                    EvFile.Import([pwd '\' vector_variable_list{k} '.evl']);
                catch
                    fprintf('failed to import the line %s\n',[vector_variable_list{k} '.evl'])
                end        
            else
                for j=1:length(data.channels)
                    try
                        EvFile.Import([pwd '\' vector_variable_list{k} '_' data.channels{j} '.evl']);
                    catch
                        fprintf('failed to import the line %s\n',[vector_variable_list{k} '_' data.channels{j} '.evl'])
                    end
                end
            end
        end    
    else
        for k = 1:length(vector_variable_list)
            try
                EvFile.Import([pwd '\' vector_variable_list{k} '.evl']);
            catch
                fprintf('failed to import the line %s\n',[vector_variable_list{k} '.evl'])
            end     
        end
    end
    EvFile.SaveAs([pwd '\nc_viewer.ev']); 
    msgbox(sprintf('Finished creating ev file "nc_viewer.ev"\nIt Open in Echoview\n'))
       
        
function [X,ndx,dbg] = natsortfiles(X,varargin)
% Alphanumeric / Natural-Order sort of a cell array of filename/filepath strings (1xN char).
%
% (c) 2012 Stephen Cobeldick
%
assert(iscell(X),'First input <X> must be a cell array.')
tmp = cellfun('isclass',X,'char') & cellfun('size',X,1)<2 & cellfun('ndims',X)<3;
assert(all(tmp(:)),'First input <X> must be a cell array of strings (1xN character).')
%
%% Split and Sort File Names/Paths %%
%
% Split full filepaths into file [path,name,extension]:
[pth,fnm,ext] = cellfun(@fileparts,X(:),'UniformOutput',false);
% Split path into {dir,subdir,subsubdir,...}:
pth = regexp(pth,'[^/\\]+','match'); % either / or \ as filesep.
len = cellfun('length',pth);
num = max(len);
vec{numel(len)} = [];
%
% Natural-order sort of the file extensions and filenames:
if nargout<3 % faster:
	[~,ndx] = natsort(ext,varargin{:});
	[~,ids] = natsort(fnm(ndx),varargin{:});
else % for debugging:
	[~,ndx,dbg{num+2}] = natsort(ext,varargin{:});
	[~,ids,tmp] = natsort(fnm(ndx),varargin{:});
	[~,idd] = sort(ndx);
	dbg{num+1} = tmp(idd,:);
end
ndx = ndx(ids);
%
% Natural-order sort of the directory names:
for k = num:-1:1
	idx = len>=k;
	vec(:) = {''};
	vec(idx) = cellfun(@(c)c(k),pth(idx));
	if nargout<3 % faster:
		[~,ids] = natsort(vec(ndx),varargin{:});
	else % for debugging:
		[~,ids,tmp] = natsort(vec(ndx),varargin{:});
		[~,idd] = sort(ndx);
		dbg{k} = tmp(idd,:);
	end
	ndx = ndx(ids);
end
%
% Return the sorted array and indices:
ndx = reshape(ndx,size(X));
X = X(ndx);
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%natsortfiles        
    
    
    
    
    
    
    
    
    
    

    






function GUI(defaults)
% function to provide a GUI to drive the IMOS BASOOP processing.
%
% Inputs:
%   defaults -  source of default values for the options to pass to
%               process_BASOOP. These default may include values not
%               displayed by the GUI.
%               defaults can be one of the following:
%       - struct containing fields 
%       - filename of text file contain name value pairs seperated by white
%           space.
%       - filename of matlab MAT file containing fields to load (including
%           save file written by GUI and log files written by process_SOOP)
%       - empty string - the user will be asked for one the above file
%           names.
%
% GUI gets a control structure from basoop (modified by input
% defaults) and presents them to the user for modification. When the "Start
% process" button is pressed the settings are read from the interface and
% passed to process_BASOOP. 
%
% process_BASOOP has no dependancies on GUI and can be run by any method
% that passes it an appropriate control structure (process_BASOOP will call
% basoop to get default values for any fields not supplied by the
% passed structure).
%
% GUI performs no actions other than to those initiated by the "Launch
% DataView", "Start process" and "Save" buttons. The "Save" buttons saves
% the current values into a MAT file which may be used as the input to GUI,
% process_BASOOP or basoop.
%

    if nargin < 1
        defaults = [];
    end
    
    % if an empty string is passed asked the user for the file to load
    % defaults from
    if ischar(defaults) && isempty(defaults)
        [deffile, defpath] = uigetfile(fullfile(pwd, 'save', ''));
        defaults = fullfile(defpath, deffile);
    end
    
    if strcmp(defaults,'-')
        wpth = fileparts(which('GUI'));
        logs = dir(fullfile(wpth,'log','*.mat'));
        timestamp = [logs.datenum];
        last = timestamp == max(timestamp);
        if ~isempty(last)
            defaults = fullfile(wpth,'log',logs(last).name);
        end
    end
    
    settings = basoop(defaults);
        
    % find list of platforms (vessels) from IMOS toolbox
    platform_path = fullfile(fileparts(mfilename('fullpath')), 'platform');
    if ~isdir(platform_path)
        platform_path = fullfile(fileparts(which('imosToolbox')), ...
            'NetCDF', 'platform');
    end
    
    pattern = '^(.+)_attributes\.txt$';
    
    platforms = listFiles(platform_path, pattern);
    
    if isempty(platforms)
        fprintf('Could not find platforms in %s\f', platform_path);
        platforms = { '' };
    end
    
    % build GUI
    fig = figure('Name', ['BASOOP GUI - ' settings.version] , 'NumberTitle', 'off');
    screen = get(0, 'ScreenSize');
    width = min(max(1100, .4*screen(3)),screen(3));
    set(fig, 'OuterPosition', [screen(3)-width screen(4)/8 width .75*screen(4)]);
        
    pltfm = 1;
    for p = 1:length(platforms)
        if strcmp(settings.platform, platforms{p})
            pltfm = p;
        end
    end
    
    base = 1;               % baseline for current control 
    step = 0.034;            % line height
    hght = 0.033;           % control height
    margin = 0.1;
    left = margin;
    right = 1 - margin;
    
    bwidth = 0.05;          % width of "Browse" buttons
    bpos = right - bwidth;  % horizontal position of "Browse" buttons
    prompt = 0.2;
    ffield = left + prompt;
    bfield = bpos - ffield - 0.01;
    
    main_panel = uipanel(...
        'Parent',       fig, ...
        'BorderType',   'none');
    
    % Vessel
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'popupmenu', ...
        'TooltipString', 'Select the Vessel the data was acquired on.', ...
        'Tag',          'platform', ...
        'String',       platforms, ...
        'Value',        pltfm, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.35 hght ])
    
    % Channels
    for chan = 1:length(settings.channels);
        selected = 0;
        for s = 1:length(settings.channel) 
            if strcmp(settings.channels{chan},settings.channel{s})
                selected = 1;
            end
        end
        frq = 0;
        if length(settings.frequencies) >= chan
            frq = settings.frequencies(chan);
        end
        
        uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', ['Process data for ' settings.channels{chan} ], ...
        'Tag',          ['channel ' num2str(chan)], ...
        'String',       settings.channels{chan}, ...
        'Value',        selected, ...
        'User',         frq, ...
        'Units',        'normalized', ...
        'Position',     [0.45 + chan * 0.05 base 0.05 hght ]);
    end
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Add a new channel', ...
        'Tag',          'add_channel', ...
        'User',         '', ...
        'String',       'Add', ...
        'User',         settings.channels, ...
        'Callback',     @add_channel, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    % DataView
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Run DataView to generate the data file list and gps file', ...
        'String',       'Launch DataView', ...
        'User',         settings, ...
        'Units',        'normalized', ...
        'Position',     [0.15 base 0.2 hght ], ...
        'Callback',     @start_Dataview);

    % DataView
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Generate the data file list and gps file in matlab', ...
        'String',       'Get transit', ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.2 hght ], ...
        'Callback',     @start_gps);

    % Metadata
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Enter metadata to be include in the NetCDF file', ...
        'Tag',          'metadata', ...
        'String',       'Pre-enter metadata', ...
        'User',         settings.meta, ...
        'Units',        'normalized', ...
        'Position',     [0.65 base 0.2 hght ], ...
        'Callback',     @view_metadata);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Edit control settings directly', ...
        'Tag',          'debug', ...
        'User',         '', ...
        'String',       'Debug', ...
        'User',         settings, ...
        'Callback',     @edit_settings, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    %
    create_panel = uipanel(...
        'Parent',       main_panel, ...
        'Position',     [0, base-10*step margin 10*step]);
    
    uicontrol(create_panel, ...
        'Style',        'text', ...
        'String',       'Create new EchoView worksheets', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 1]);
    
    % Create EV files
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Create .ev files from the template and raw data files', ...
        'Tag',          'create_ev_files', ...
        'String',       'Create a set of ev files based on the selected raw files', ...
        'Value',        settings.create_ev_files, ...
        'FontWeight',   'bold', ...
        'Units',        'normalized', ...
        'Position',     [left base 0.5 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'create ev status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Detect:', ...
        'Units',        'normalized', ...
        'Position',     [0.45 base 0.05 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', ['Include bottom line pick in .ev file based on "' ...
                            settings.base_variable_name '"'], ...
        'Tag',          'detect_seafloor', ...
        'String',       'Seafloor', ...
        'Value',        settings.detect_seafloor, ...
        'Units',        'normalized', ...
        'Position',     [0.5 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', ['Include line pick of upper deep scattering layer in .ev file based on "' ...
                            settings.resample_variable_name '"'], ...
        'Tag',          'detect_upper_DSL', ...
        'String',       'Upper deep scatter layer', ...
        'Value',        settings.detect_upper_DSL, ...
        'Units',        'normalized', ...
        'Position',     [0.6 base 0.15 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Create fixed line for editing as DSL', ...
        'Tag',          'detect_fixed', ...
        'String',       'DSL @', ...
        'Value',        settings.detect_fixed, ...
        'Units',        'normalized', ...
        'Position',     [0.75 base 0.05 hght ]);
    
     uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Depth of fixed line for deep scattering layer in m', ...
        'Tag',          'fixed layer', ...
        'String',       num2str(settings.fixed_layer), ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [0.8 base 0.05 hght ]);   

    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Create ev files in non-standard directory', ...
        'Tag',          'create_alt_ev_files', ...
        'String',       'Create in:', ...
        'Value',        settings.create_alt_ev_files, ...
        'Units',        'normalized', ...
        'Position',     [left + 0.05 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of directory to put ev files', ...
        'Tag',          'alt ev dir', ...
        'String',       settings.alt_ev_dir, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the filelist file', ...
        'Tag',          'alt ev dir browse', ...
        'User',         '', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);

    % Template
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Echoview template', ...
        'HorizontalAlignment',        'Left', ...
        'Units',        'normalized', ...
        'Position',     [margin + 0.05 base prompt hght ]);
        
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Filename of the echoview template to use to process this data', ...
        'Tag',          'Echoview template', ...
        'String',       settings.template, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the echoview template', ...
        'Tag',          'Echoview template browse', ...
        'User',         '*.ev', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]); 
    
    % Calibration
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read metadata from an EchoView Calibrations Settings (.ecs) file', ...
        'Tag',          'read ecs', ...
        'String',       'Read calibration file', ...
        'Units',        'normalized', ...
        'Value',        settings.read_ecs, ...
        'Position',     [margin + 0.05 base prompt hght ]);
        
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Filename of the echoview calibration file', ...
        'Tag',          'calibration file', ...
        'String',       settings.calibration_file, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the echoview calibration file', ...
        'Tag',          'calibration file browse', ...
        'User',         '*.ecs', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]); 
    
    % .raw files
    % GUI only currently supports 1 additional file set, process_BASOOP
    % supports any number
    datafiles = settings.transit_data_files;
    addfiles = '';
    if iscell(datafiles)
        datafiles = settings.transit_data_files{1};
        if length(settings.transit_data_files) > 1
            addfiles = settings.transit_data_files{2};
        end
    end

    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Raw data file list', ...
        'HorizontalAlignment',        'Left', ...
        'Units',        'normalized', ...
        'Position',     [margin + 0.05 base prompt hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', ['Name of the file containing the list of .raw files to process in fileset ' settings.filesets{1}], ...
        'Tag',          'transit data files', ...
        'String',       datafiles, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the transit data file list', ...
        'Tag',          'transit data files browse', ...
        'User',         '*.txt', ...
        'String',       'Browse', ...
        'Callback',     @browse_raw, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    % 12 kHz .raw files
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       '   12 kHz Raw data file list', ...
        'HorizontalAlignment',        'Left', ...
        'Units',        'normalized', ...
        'Position',     [margin + 0.05 base prompt hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', ['Name of the file containing the list of .raw files to process in fileset ' settings.filesets{2}], ...
        'Tag',          '12 kHz data files', ...
        'String',       addfiles, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the transit data file list', ...
        'Tag',          '12 kHz data files browse', ...
        'User',         '*.txt', ...
        'String',       'Browse', ...
        'Callback',     @browse_raw, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
       
    % .gps.csv files
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Raw data gps.csv file', ...
        'HorizontalAlignment',        'Left', ...
        'Units',        'normalized', ...
        'Position',     [margin + 0.05 base prompt hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the .gps.csv file containing navigation for the whole transit', ...
        'Tag',          'transit gps file', ...
        'String',       settings.transit_gps_file, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the gps.csv file', ...
        'Tag',          'transit gps file browse', ...
        'User',         '*.gps.csv', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    % .roll.csv files
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Include roll file in worksheet', ...
        'Tag',          'include_roll', ...
        'String',       'roll.gps file', ...
        'Value',        settings.include_roll, ...
        'Units',        'normalized', ...
        'Position',     [left + 0.05 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the .roll.csv file containing motion data for the whole transit', ...
        'Tag',          'transit roll file', ...
        'String',       settings.transit_roll_file, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the roll.csv file', ...
        'Tag',          'transit roll file browse', ...
        'User',         '*.roll.csv', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);

    % .pitch.csv files
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Include pitch file in worksheet', ...
        'Tag',          'include_pitch', ...
        'String',       'pitch.gps file', ...
        'Value',        settings.include_pitch, ...
        'Units',        'normalized', ...
        'Position',     [left + 0.05 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the .pitch.csv file containing motion data for the whole transit', ...
        'Tag',          'transit pitch file', ...
        'String',       settings.transit_pitch_file, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the pitch.csv file', ...
        'Tag',          'transit pitch file browse', ...
        'User',         '*.pitch.csv', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);

    % time block
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Span of EV files in hours:', ...
        'HorizontalAlignment',        'Left', ...
        'Units',        'normalized', ...
        'Position',     [margin + 0.05 base prompt hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Number of hours of data to process per .ev file', ...
        'Tag',          'time block', ...
        'String',       num2str(settings.time_block), ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Time offset from UTC: ', ...
        'HorizontalAlignment',        'Right', ...
        'Units',        'normalized', ...
        'Position',     [0.5 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Time offset of logged data from UTC', ...
        'Tag',          'time offset', ...
        'String',       num2str(settings.time_offset / 60), ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [0.5 + 0.1 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'popupmenu', ...
        'TooltipString', 'Time offset units', ...
        'Tag',          'time offset units', ...
        'String',       {'hours', 'minutes', 'seconds'}, ...
        'Value',        2, ...
        'User',         2, ...
        'HorizontalAlignment', 'left', ...
        'Callback',     @changeTimeOffsetUnits, ...
        'Units',        'normalized', ...
        'Position',     [0.7 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Check the time_offset data in the .gps.csv file', ...
        'Tag',          'Check time offset', ...
        'String',       'Check', ...
        'Callback',     @checkTimeOffset, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'check status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    %
    review_panel = uipanel(...
        'Parent',       main_panel, ...
        'Position',     [0, base-2*step margin 2* step]);
    
    uicontrol(review_panel, ...
        'Style',        'text', ...
        'String',       'Use EchoView to interact with worksheets', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 1]);
    
    % Alternate EV file location
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'If not creating ev files, use the specified ev file list (otherwise use list determined by file names)', ...
        'Tag',          'use_alt_ev_files', ...
        'String',       'Use ev files from:', ...
        'Value',        settings.use_alt_ev_files, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.2 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the file containing list of echoview worksheets', ...
        'Tag',          'alt ev files', ...
        'String',       settings.alt_ev_files, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the filelist file', ...
        'Tag',          'alt ev files browse', ...
        'User',         '*.txt', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    % Review worksheets
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Review the .ev files in echoview and optionally select which files to process', ...
        'Tag',          'review_ev_files', ...
        'String',       'Review the ev worksheets', ...
        'Value',        settings.review_ev_files, ...
        'FontWeight',   'bold', ...
        'Units',        'normalized', ...
        'Position',     [left base 0.8 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'review ev status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    %
    ev_panel = uipanel(...
        'Parent',       main_panel, ...
        'Position',     [0, base-3*step margin 3*step]);
    
    uicontrol(ev_panel, ...
        'Style',        'text', ...
        'String',       'Process worksheets', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 1]);
    
    % Export HAC
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Export .ev files to HAC format and re-import', ...
        'Tag',          'export_import_HAC', ...
        'String',       'Export all worksheets to HAC files and re-import worksheets', ...
        'Value',        settings.export_import_HAC, ...
        'FontWeight',   'bold', ...
        'Units',        'normalized', ...
        'Position',     [left base 0.3 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Export HAC variables', ...
        'Tag',          'export_HAC', ...
        'String',       'Export', ...
        'Value',        settings.export_HAC, ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Import HAC variables', ...
        'Tag',          'import_HAC', ...
        'String',       'Import', ...
        'Value',        settings.import_HAC, ...
        'Units',        'normalized', ...
        'Position',     [0.5 base 0.1 hght ]);
    
    for hac = 1:5
        HAC = ['HAC' num2str(hac)];
        uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', ['Process variable ' HAC], ...
        'Tag',          HAC, ...
        'String',       HAC, ...
        'Value',        max(hac == settings.HAC), ...
        'Units',        'normalized', ...
        'Position',     [0.6+(hac-1)*0.05 base 0.05 hght ]);    
   end
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'export HAC status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % Export .csv
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Export Sv to .csv files', ...
        'Tag',          'export_sv', ...
        'String',       'Export to echointegration results', ...
        'Value',        settings.export_sv, ...
        'FontWeight',   'bold', ...
        'Units',        'normalized', ...
        'Position',     [left base 0.8 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'export csv status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Export:', ...
        'Units',        'normalized', ...
        'Position',     [left base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', [ 'Export reference (uncleaned) data - ' ...
                            settings.export_reference_variable_name ], ...
        'Tag',          'export_reference', ...
        'String',       'Reference', ...
        'Value',        settings.export_reference, ...
        'Units',        'normalized', ...
        'Position',     [0.2 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', [ 'Export cleaned data - ' ...
                            settings.export_final_variable_name ], ...
        'Tag',          'export_final', ...
        'String',       'Cleaned', ...
        'Value',        settings.export_final, ...
        'Units',        'normalized', ...
        'Position',     [0.3 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', [ 'Exported rejected data - ' ...
                            settings.export_rejectdata_variable_name ], ...
        'Tag',          'export_reject', ...
        'String',       'Rejected', ...
        'Value',        settings.export_reject, ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', [ 'Exported signal to noise - ' ...
                            settings.export_noise_variable_name ], ...
        'Tag',          'export_noise', ...
        'String',       'Noise', ...
        'Value',        settings.export_noise, ...
        'Units',        'normalized', ...
        'Position',     [0.5 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', [ 'Exported background level - ' ...
                            settings.export_background_variable_name ], ...
        'Tag',          'export_background', ...
        'String',       'Background', ...
        'Value',        settings.export_background, ...
        'Units',        'normalized', ...
        'Position',     [0.6 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       ['Grid height: ' num2str(settings.Grid_height)], ...
        'TooltipString', 'value of Grid_height used in echointegration grid', ...
        'HorizontalAlignment', 'Left', ...
        'Units',        'normalized', ...
        'Position',     [0.7 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       ['distance: ' num2str(settings.Grid_distance)], ...
        'TooltipString', 'value of Grid_distance used in echointegration grid', ...
        'HorizontalAlignment', 'Left', ...
        'Units',        'normalized', ...
        'Position',     [0.8 base 0.1 hght ]);
    
    %
    netcdf_panel = uipanel(...
        'Parent',       main_panel, ...
        'Position',     [0, base-10*step margin 10*step]);
    
    uicontrol(netcdf_panel, ...
        'Style',        'text', ...
        'String',       'Create a NetCDF file from either echointegration data or an existing NetCDF file', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 1]);
    
    % read echointegration
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read data from the echointegraion .csv files', ...
        'Tag',          'read echointegration', ...
        'String',       'Read echointegration', ...
        'Value',        settings.read_echointegration, ...
        'FontWeight',   'bold', ...
        'Units',        'normalized', ...
        'Position',     [left base 0.15 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Directory containing echointegration .csv files', ...
        'Tag',          'echointegration path', ...
        'String',       settings.echointegration_path, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the echointegration directory', ...
        'Tag',          'echointegration path browse', ...
        'User',         '', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'read echointegration status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);

    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Generate an multi-channel format (even if only one channel) Netcdf', ...
        'Tag',          'single format', ...
        'String',       'Multi-channel format', ...
        'Value',        ~settings.single_format, ...
        'Units',        'normalized', ...
        'Position',     [0.25 base 0.15 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Generate an extended format NetCDF file for internal use', ...
        'Tag',          'extended netcdf', ...
        'String',       'Extended', ...
        'Value',        settings.extended, ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       ['Maximum depth: ' num2str(settings.max_depth)], ...
        'TooltipString', 'Value of max_depth, maximum depth to read from echointegration csvs', ...
        'HorizontalAlignment', 'Left', ...
        'Units',        'normalized', ...
        'Position',     [0.5 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       ['Minimum % good: ' num2str(settings.min_good)], ...
        'TooltipString', 'Value of min_good, minimum percent good to read from echointegration csvs', ...
        'HorizontalAlignment', 'Left', ...
        'Units',        'normalized', ...
        'Position',     [0.63 base 0.1 hght ]);
  
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       ['Flag % good: ' num2str(settings.accept_good)], ...
        'TooltipString', 'Value of accept_good, minimum percent good to flag as good data', ...
        'HorizontalAlignment', 'Left', ...
        'Units',        'normalized', ...
        'Position',     [0.76 base 0.1 hght ]);
  
%     % Merge
%     base = base - step;
%     uicontrol(main_panel, ...
%         'Style',        'checkbox', ...
%         'TooltipString', 'Merge exported .csv files into a format suitable for IMOS toolbox parser', ...
%         'Tag',          'merge', ...
%         'String',       'Merge CSV files to:', ...
%         'Value',        settings.merge, ...
%         'FontWeight',   'bold', ...
%         'Units',        'normalized', ...
%         'Position',     [left base 0.2 hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'edit', ...
%         'TooltipString', 'Name of the file to hold the merged .csv', ...
%         'Tag',          'merge file', ...
%         'String',       settings.merge_file, ...
%         'HorizontalAlignment', 'left', ...
%         'Units',        'normalized', ...
%         'Position',     [ffield base bfield hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'pushbutton', ...
%         'TooltipString', 'Select the merge file', ...
%         'Tag',          'merge file browse', ...
%         'User',         '+*.csv', ...
%         'String',       'Browse', ...
%         'Callback',     @browse, ...
%         'Units',        'normalized', ...
%         'Position',     [bpos base bwidth hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'text', ...
%         'Tag',          'merge status', ...
%         'String',       '', ...
%         'Units',        'normalized', ...
%         'Position',     [right base margin hght ]);
%     
%     % Parse merge
%     base = base - step;
%     uicontrol(main_panel, ...
%         'Style',        'checkbox', ...
%         'TooltipString', 'Read data from the merge file', ...
%         'Tag',          'read merge', ...
%         'String',       'Read merge file', ...
%         'Value',        settings.read_merge, ...
%         'FontWeight',   'bold', ...
%         'Units',        'normalized', ...
%         'Position',     [left base 0.1 hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'checkbox', ...
%         'TooltipString', 'Generate an extended format NetCDF file for internal use', ...
%         'Tag',          'extended netcdf', ...
%         'String',       'Extended', ...
%         'Value',        settings.extended, ...
%         'Units',        'normalized', ...
%         'Position',     [0.2 base 0.1 hght ]);
% 
%     uicontrol(main_panel, ...
%         'Style',        'edit', ...
%         'TooltipString', 'Name of the merged .csv, leave blank to use merge file above', ...
%         'Tag',          'parse file', ...
%         'String',       settings.parse_file, ...
%         'HorizontalAlignment', 'left', ...
%         'Units',        'normalized', ...
%         'Position',     [ffield base bfield hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'pushbutton', ...
%         'TooltipString', 'Select the merge file to parse', ...
%         'Tag',          'parse file browse', ...
%         'User',         '*.csv', ...
%         'String',       'Browse', ...
%         'Callback',     @browse, ...
%         'Units',        'normalized', ...
%         'Position',     [bpos base bwidth hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'text', ...
%         'Tag',          'read merge status', ...
%         'String',       '', ...
%         'Units',        'normalized', ...
%         'Position',     [right base margin hght ]);
    
    % Import netCDF
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read data from an existing NetCDF file instead of the above processes', ...
        'Tag',          'read netcdf', ...
        'String',       'Read NetCDF file', ...
        'Value',        settings.read_netcdf, ...
        'Units',        'normalized', ...
        'Position',     [left base prompt hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the NetCDF file to read', ...
        'Tag',          'netcdf file', ...
        'String',       settings.netcdf_file, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the NetCDF file', ...
        'Tag',          'netcdf file browse', ...
        'User',         {'*.nc','NetCDF files (*.nc)'; '*.mat', 'MAT files (*.mat)'}, ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'read netcdf status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % Voyage information
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read metadata from voyage information (.inf) file', ...
        'Tag',          'read inf', ...
        'String',       'Read voyage file', ...
        'Units',        'normalized', ...
        'Value',        settings.read_inf, ...
        'Position',     [left base prompt hght ]);
        
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Filename of the voyage .inf file', ...
        'Tag',          'inf file', ...
        'String',       settings.voyage_inf, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the voyage information file', ...
        'Tag',          'inf file browse', ...
        'User',         '*.inf', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]); 
    
    % synTS
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read synetic Temperature and Salinity data for the transect', ...
        'Tag',          'synTS', ...
        'String',       'Read synTS', ...
        'Value',        settings.synTS, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read CARS oceanography', ...
        'Tag',          'CARS', ...
        'String',       'Read CARS', ...
        'Value',        settings.CARS, ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read Net Primary Production', ...
        'Tag',          'npp', ...
        'String',       'Read npp', ...
        'Value',        settings.npp, ...
        'Units',        'normalized', ...
        'Position',     [0.7 base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'synTS status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % Sound speed
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Correct data for speed and absorption of sound from synTS data', ...
        'Tag',          'sound_speed', ...
        'String',       'Correct for sound speed and absorption', ...
        'Value',        settings.sound_speed, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.3 hght ]);

    speed_panel = uibuttongroup(main_panel, ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.3 hght ]);
        
    uicontrol(speed_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Use Coppens [1981] sound speed formula', ...
        'Tag',          'speed_coppens', ...
        'String',       'Coppens', ...
        'Value',        strcmp (settings.soundspeed_formula, 'Coppens'), ...
        'Units',        'normalized', ...
        'Position',     [0 0 1/3 1 ]);

    uicontrol(speed_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Use Mackenzie [1981] sound speed formula', ...
        'Tag',          'speed_mackenzie', ...
        'String',       'Mackenzie', ...
        'Value',        strcmp (settings.soundspeed_formula, 'Mackenzie'), ...
        'Units',        'normalized', ...
        'Position',     [1/3 0 1/3 1 ]);

    uicontrol(speed_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Use Gibbs SeaWater Oceanographic Toolbox - TEOS-10 sound speed formula', ...
        'Tag',          'speed_gsw', ...
        'String',       'GSW TEOS-10', ...
        'Value',        strcmp (settings.soundspeed_formula, 'GSW'), ...
        'Units',        'normalized', ...
        'Position',     [2/3 0 1/3 1 ]);


    absorption_panel = uibuttongroup(main_panel, ...
        'Units',        'normalized', ...
        'Position',     [0.7 base 0.2 hght ]);
        
    uicontrol(absorption_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Use Francois and Garrison [1982] sound absorption formula', ...
        'Tag',          'absorption_francois', ...
        'String',       'Francois', ...
        'Value',        strcmp (settings.soundabsorption_formula, 'Francois'), ...
        'Units',        'normalized', ...
        'Position',     [0 0 0.5 1 ]);

    uicontrol(absorption_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Use Doonan sound absorption formula', ...
        'Tag',          'absorption_doonan', ...
        'String',       'Doonan', ...
        'Value',        strcmp (settings.soundabsorption_formula, 'Doonan'), ...
        'Units',        'normalized', ...
        'Position',     [0.5 0 0.5 1 ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'sound speed status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % Review metadata
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Review and edit the metadata to be included in the NetCDF file', ...
        'Tag',          'review metadata', ...
        'String',       'Review metadata', ...
        'Value',        settings.review_metadata, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.4 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read additional metadata from the file', ...
        'Tag',          'read metadata', ...
        'String',       'Extra metadata:', ...
        'Value',        settings.read_meta, ...
        'Units',        'normalized', ...
        'Position',     [0.2 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the metadata file', ...
        'Tag',          'metadata file', ...
        'String',       settings.metadata_file, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the metadata file', ...
        'Tag',          'metadata file browse', ...
        'User',         '*.txt', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'review metadata status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % matlab_view
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Flag areas of bad data in matlab', ...
        'Tag',          'zap', ...
        'String',       'Manual data cleaning', ...
        'Value',        settings.zap, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Drop into matlab to view sample_data - type "return" to continue', ...
        'Tag',          'matlab_view', ...
        'String',       'Review sample_data in matlab', ...
        'Value',        settings.matlab_view, ...
        'Units',        'normalized', ...
        'Position',     [ffield base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'matlab_view status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % NetCDF
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Generate a NetCDF file from the merge file', ...
        'Tag',          'netcdf', ...
        'String',       'Export NetCDF file to', ...
        'Value',        settings.netcdf, ...
        'FontWeight',   'bold', ...
        'Units',        'normalized', ...
        'Position',     [left base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Directory to put NetCDF file', ...
        'Tag',          'netcdf directory', ...
        'String',       settings.netcdf_directory, ...
        'HorizontalAlignment', 'left', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the merge file', ...
        'Tag',          'netcdf directory browse', ...
        'User',         '', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);    
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'export NetCDF status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
        
    %
    viz_panel = uipanel(...
        'Parent',       main_panel, ...
        'Position',     [0, base-1*step margin 1*step]);
    
    uicontrol(viz_panel, ...
        'Style',        'text', ...
        'String',       'viz_sv(ncfile,'''')', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 1]);
    
    % Viz
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Visualise the netcdf file', ...
        'Tag',          'viz', ...
        'String',       'Visualise NetCDF file', ...
        'Value',        settings.viz, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.8 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'visualise NetCDF status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % controls positioned relative to bottom.
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Run process_BASOOP with the above settings', ...
        'String',       'Start process', ...
        'User',         settings, ...
        'Units',        'normalized', ...
        'Position',     [0.2 step 0.3 hght ], ...
        'Callback',     @start_process);
        
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Save the above settings to a file', ...
        'String',       'Save', ...
        'User',         settings, ...
        'Units',        'normalized', ...
        'Position',     [0.6 step 0.2 hght ], ...
        'Callback',     @save_settings);
        
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 hght ]);
    
    function hits = listFiles(path, pattern)
        %LISTFILES Returns a cell array containing the names of all files
        %in the given directory which match the given (regex) pattern. 
        % Copied from IMOS-toolbox/Util
        
        narginchk(2,2);
        
        if ~ischar(path),    error('path must be a string');    end
        if ~ischar(pattern), error('pattern must be a string'); end
        
        hits = {};
        
        % get the contents of the directory
        files = dir(path);
        
        %iterate through each element in the directory
        for file = files'
            
            %skip subdirectories
            if file.isdir == 1, continue; end
            
            %if name matches the pattern, add
            %it to the list of hits
            token = regexp(file.name, pattern, 'tokens');
            
            %add the name name to the list
            if ~isempty(token), hits{end + 1} = token{1}{1}; end            %#ok<AGROW>
            
        end
        
        % sort alphabetical, case insensitive
        [~, idx] = sort(lower(hits));
        hits     = hits(idx);

    end

    function browse(button, ~)
        % Browse button callback.
        % Assumes there is an edit control with a Tag that matches
        % this button's Tag less the ' browse' suffix.
        %
        % This objects User data is the file filter, 
        % If User is an empty string it gets a directory instead of a file.
        % If User starts with a '+' uiputfile is called 
        
        tag = get(button, 'Tag');
        if strcmp(tag(end - 6 : end), ' browse')
            tag = tag(1 : end - 7);
        else
            tag = 'unknown';
        end
        
        parent = get(button, 'Parent');
        field = get_control(parent, tag);       
        if isempty(field)
            error('Can''t find field to browse');
        end
        
        user = get(button, 'User');
        if isempty(user) && ischar(user)
            path = uigetdir(get(field, 'String'),['Select ' tag]);
            if path ~= 0
                set(field, 'String', path);
            end
        else
            if isempty(user)
                user='*';
            end
            
            if ischar(user) && user(1) == '+'
                [filename, path] = uiputfile(user(2:end), ['Select ' tag], get(field, 'String'));
            else
                [filename, path] = uigetfile(user, ['Select ' tag], get(field, 'String'));
            end
            if filename ~= 0
                set(field, 'String', fullfile(path,filename));
            end
        end
    end

    function browse_raw(button, ~)
        % Browse button callback for raw file list.
        % Also updates the gps file based on the selection.
        browse(button)
        parent = get(button, 'Parent');
        data = get_control(parent, 'transit data files');
        gps = get_control(parent, 'transit gps file');
        [pathname, ~, ~ ] = fileparts(get(data, 'String'));
        [~, filename, ext] = fileparts(get(gps, 'String'));
        set(gps, 'String', fullfile(pathname, [filename ext]));
    end

    function checkTimeOffset(button, ~)
        % function to check the .gps.csv file for UTC offset.
        % A histogram of the offset values are shown to the user and
        % the median offset value is placed in the time offset field.
        % Offsets of less than 5 minutes are treated as 0.
        
        parent = get(button, 'Parent');
        
        set(get_control(parent,'check status'),'String', datestr(now, 'HH:MM:SS'));
        drawnow;
        
        transit_gps_file = ...
            get(get_control(parent, 'transit gps file'), 'String');
        fid = fopen(transit_gps_file, 'r');
        if fid < 0
            warndlg(['Couldn''t find file: ' transit_gps_file ]);
            set(get_control(parent,'check status'),'String', '');
            return
        end
        header = fgetl(fid);
        head = sscanf(header,'%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%s');
        offset = textscan(fid, '%*s%*s%*s%*s%*s%f%*[^\n]', ...
            'delimiter', ',');
        if ~feof(fid)
            warning('GUI:GPS','Unable to fully scan for UTC offset in %s', transit_gps_file)
        end
        fclose(fid);
        
        offset=offset{1};
        offset=offset(~isnan(offset));
        if isempty(offset)
            warndlg(['No UTC offset found in file: ' transit_gps_file]);
            set(get_control(parent,'check status'),'String', '');
            return
        end
        
        figure
        plot(offset);
        title({transit_gps_file, head}, 'Interpreter', 'none')
        ylabel('Seconds');
        
        figure
        bins=min(max(offset) - min(offset) + 1, 100);
        hist(offset,bins);
        title({transit_gps_file, [head ' histogram']}, 'Interpreter', 'none')
        xlabel('Seconds');
        ylabel('Count');
        
        off = median(offset);
        if abs(off) < 300
            off = 0;
        end
        time_offset = get_control(parent, 'time offset');
        time_unit = get_control(parent, 'time offset units');
        units = 60 ^ (3 - get(time_unit, 'Value'));
        set(time_offset, 'String', num2str(off / units));   
        set(get_control(parent,'check status'),'String', '');

    end

    function changeTimeOffsetUnits(button, ~)
        new = get(button, 'Value');
        old = get(button, 'User');
        set(button, 'User', new);
        scale = 60 ^ (new - old);
        parent = get(button, 'Parent');
        time_offset = get_control(parent, 'time offset');
        off = str2double(get(time_offset, 'String'));
        set(time_offset, 'String', num2str(off * scale)); 
    end

    function start_Dataview(button, ~)
        % function to kick off Dataview
        % presumes that your Z drive is mapped to acoustics on titanic\groups
        setting = get(button, 'User');
        
        wd = cd(setting.dataview_dir);
        try
            system(setting.dataview_cmd);
        catch e
            fprintf('Probably can''t find dataview. \n%s\n', e.message);
            fprintf('Check that acoustics on titanic\groups is mapped to your Z drive\n');
        end
        cd(wd);
    end

    function start_gps(button, ~)
        % Callback to get file list and .gps.csv
        parent = get(button, 'Parent');
        data = get_control(parent, 'transit data files');
        listFile = fileparts(get(data,'String'));        
        [listFile,~,gpsFile,pitchFile,rollFile,~] = getGPS(listFile,listFile);
        set(data,'String',listFile);
        gps = get_control(parent, 'transit gps file');
        set(gps,'String',gpsFile);
        if ~isempty(pitchFile)
            pitch = get_control(parent, 'transit pitch file');
            set(pitch, 'String', pitchFile);
            roll = get_control(parent, 'transit roll file');
            set(roll, 'String', rollFile);
        end
    end

    function view_metadata(button, ~)
        % Callback to launch metadata review UI.
        set(button, 'User', review_metadata(get(button, 'User')));
    end

    function edit_settings(button, ~)
        % Callback to edit settings directly
        % modify setting structure to look like a sample_data
        setting = read_settings(button);
        fields = fieldnames(setting);
        for i = 1:length(fields)
            field = fields{i};
            if ~ischar(setting.(field)) && ~isempty(setting.(field)) && ...
                    (iscell(setting.(field)) || isstruct(setting.(field)) || ...
                    isa(setting.(field), 'function_handle'))
                bypass.(field) = setting.(field);
                setting = rmfield(setting, field);
            end
        end
        setting.frequencies = setting.frequencies';
        setting.frequency = setting.frequency';
        
        setting.variables=[];
        setting.dimensions=[];
        setting.meta = [];
        
        % allow user to edit
        setting = review_metadata(setting);
        
        fields = fieldnames(bypass);
        for i = 1:length(fields)
        	field = fields{i};
            setting.(field) = bypass.(field);
        end
        setting.frequencies = setting.frequencies';
        setting.frequency = setting.frequency';
       
        % store editted setting
        set(button, 'User', setting);
        parent = get(button, 'Parent');
        dataview = get_control(parent, 'Dataview button');
        save = get_control(parent, 'Save button');
        start = get_control(parent, 'Start button');
        set(dataview, 'User', setting);
        set(save, 'User', setting);
        set(start, 'User', setting);
    end

    function add_channel(button, ~)
        % Callback to add a new channel to the GUI. 
        channels = get(button, 'User');
        pos = get(button, 'Position');
        panel = get(button, 'Parent');
        
        answer = inputdlg({'Channel id','Frequency'}, 'New channel');
        
        if ~isempty(answer)
            channels(end + 1) = answer(1);
            freq = str2double(answer{2});
            
            chn = length(channels);
            
            uicontrol(panel, ...
                'Style',        'checkbox', ...
                'TooltipString', ['Process data for ' channels{chn} ], ...
                'Tag',          ['channel ' num2str(chn)], ...
                'String',       channels{chn}, ...
                'Value',        1, ...
                'User',         freq, ...
                'Units',        'normalized', ...
                'Position',     [0.45 + chn * 0.05 pos(2) 0.05 pos(4) ]);
            
            set(button, 'User', channels);
        end
    end

    function handle = get_control(parent, tag)
        % function to find control by tag
        
        siblings = get(parent, 'Children');
        handle = [];
        for i = 1:length(siblings)
            if strcmp(tag, get(siblings(i), 'Tag'))
                handle = siblings(i);
                return;
            end
        end       
        % if not found at this level try sub panels.
        for i = 1:length(siblings)
            if strcmp(get(siblings(i), 'Type'), 'uipanel') || ...
               strcmp(get(siblings(i), 'Type'), 'uibuttongroup')
                handle = get_control(siblings(i), tag);
                if ~isempty(handle)
                    return;
                end
            end
        end
    end

    function progress(tag, start, i, n, message)
        % Function to display progress status.
        if nargin < 2;      start = [];     end
        if nargin < 3;      i = [];         end
        if nargin < 5;      message = [];   end
        
        control = findobj('Tag', [tag ' status']);
        if ~isempty(control)
            if isempty(i)
                set(control, 'String', 'processing')
            elseif i < 0
                set(control, 'String', {'skipped'; datestr(now, 'HH:MM:SS')})
            elseif i <= n
                if isempty(start)
                    set(control, 'String', sprintf('processing %d/%d', i + 1, n));
                else
                    set(control, 'String', ...
                        {sprintf('processing %d/%d', i, n); ...
                        ['elapsed: ' datestr(toc(start)/86400, 'HH:MM:SS')]})
                end
               
            else
                set(control, 'String', {'completed at'; datestr(now, 'HH:MM:SS')})
            end
        end
        if ischar(message)
            msg = findobj('Tag', 'status');
            if ~isempty(msg)
                set(msg, 'String', message)
            end
        end
        drawnow
    end

    function start_process(button, ~)
        % function to read user input from the UI then run process_BASOOP
        % with the provided values.
        %
        % The start button passes the settings structure in its User data.
        
        parent = get(button, 'Parent');
        
        % clear progress messages
        siblings = get(parent, 'Children');
        for ui = siblings'
            tag = get(ui, 'Tag');
            if strfind(tag, 'status')
                set(ui, 'String', '');
            end
        end       
        
        % Confirm dubious settings
        setting = read_settings(button);
        
        if setting.create_ev_files
            q = questdlg('Please confirm you want to create .EV files','Confirm EV create','Yes','No','Yes');
            if strcmp(q,'No')
                msgbox('Processing cancelled by user', 'Process aborted');
                return
            end
        end
        
        if (setting.netcdf && ~setting.read_netcdf && ...
                isfield(setting.meta,'transit_start_locality') && isempty(setting.meta.transit_start_locality)) || ...
            (setting.sound_speed && ~setting.read_ecs && ...
                isfield(setting.meta,'transceiver_absorption') && isempty(setting.meta.transceiver_absorption))
            q = questdlg({'Needed metadata has not been entered.' 'Pre-enter metadata now?'}, ...
                'Missing metadata', 'Yes', 'No', 'Yes');
            if strcmp(q, 'Yes')
                setting.meta = review_metadata(setting.meta);
                set(get_control(parent,'metadata'),'User',setting.meta);
            end
        end
        
        platform = setting.platform;
        platform(platform == ' ') = '_';
        
        if setting.read_ecs  && (setting.create_ev_files || setting.netcdf)
            if isempty(strfind(setting.calibration_file, platform))
                q = questdlg({['Platform name ' platform] 'not found in ecs file path.' 'Is this correct?' 'Just asking'}, ...
                    'Platform not in ecs', 'OK', 'Cancel', 'OK');
                if strcmp(q, 'Cancel')
                    msgbox('Processing cancelled by user', 'Process aborted');
                    return
                end
            end            
        end
        
        if setting.read_echointegration
             if isempty(strfind(setting.echointegration_path, platform))
                q = questdlg({['Platform name ' platform] 'not found in echointegration path.' 'Is this correct?' 'Just asking'}, ...
                    'Platform not in path', 'OK', 'Cancel', 'OK');
                if strcmp(q, 'Cancel')
                    msgbox('Processing cancelled by user', 'Process aborted');
                    return
                end
            end            
        end
        
        if setting.netcdf
            if isempty(fileparts(setting.netcdf_directory)) && setting.read_netcdf
                setting.netcdf_directory = fullfile(fileparts(setting.netcdf_file), setting.netcdf_directory);
            end
            if ~exist(setting.netcdf_directory, 'dir')
                q = questdlg({'NetCDF output directory' setting.netcdf_directory ...
                    'does not exist.' 'Create it?'}, ...
                    'NetCDF directory not found', 'OK', 'Cancel', 'Cancel');
                if strcmp(q, 'Cancel')
                    msgbox('Processing cancelled by user', 'Process aborted');
                    return
                end
                mkdir(setting.netcdf_directory);
            end
        end
                
           
        % run the processing
        try
            start_time=tic;
            process_BASOOP(setting);
            telapsed = toc(start_time);
            message = sprintf('Program completed in %.1f minutes\n', (telapsed)/60);
            msgbox(message, 'process_BASOOP completed successfully')
 
        catch exception
            progress('', 0, 1, 1, [datestr(now, 'HH:MM:SS') ' ERROR: ' exception.message]);
            
            setting.error = exception;
            setting.matlab_path = path;
            pth = fileparts(which('GUI'));
            if isdir(fullfile(pth, 'log'))
                save(fullfile(pth, 'log',['Error_' datestr(now,'yyyymmdd-HHMMSS') '_' getenv('USER') getenv('UserName')]), ...
                    '-struct', 'setting');
            end
            
            warndlg(exception.message, 'process_BASOOP failed:');
            rethrow(exception)
        end
    end

    function save_settings(button, ~)
        % Call back function for the save button.
        % This writes the current settings of the GUI to the requested
        % file.
        setting = read_settings(button);                                    %#ok<NASGU> - read by save()
        [filename,path] = uiputfile(fullfile(pwd, 'save', ''));
        if filename ~= 0
            save(fullfile(path, filename), '-struct', 'setting');
        end;
    end
    
    function setting = read_settings(button)
        % Returns the current setting of the GUI.
        % The input button can be any uicontrol in the main_panel of the
        % GUI whose 'User' data is a settings structure, 
        % e.g. Start and Save buttons.
        
        setting = get(button, 'User');
        parent = get(button, 'Parent');
        
        % collect settings from user input
        
        % files
        if ~iscell(setting.transit_data_files)
            setting.transit_data_files = [];
        end
        setting.template = ...
            get(get_control(parent, 'Echoview template'), 'String');
        setting.transit_data_files{1} = ...
            get(get_control(parent, 'transit data files'), 'String');
        setting.transit_data_files{2} = ...
            get(get_control(parent, '12 kHz data files'), 'String');
        setting.transit_gps_file = ...
            get(get_control(parent, 'transit gps file'), 'String');
        setting.transit_pitch_file = ...
            get(get_control(parent, 'transit pitch file'), 'String');
        setting.transit_roll_file = ...
            get(get_control(parent, 'transit roll file'), 'String');
        setting.alt_ev_dir = ...
            get(get_control(parent, 'alt ev dir'), 'String');
        setting.alt_ev_files = ...
            get(get_control(parent, 'alt ev files'), 'String');
        setting.echointegration_path = ...
            get(get_control(parent, 'echointegration path'), 'String');
        setting.merge_file = ...
            get(get_control(parent, 'merge file'), 'String');
        setting.parse_file = ...
            get(get_control(parent, 'parse file'), 'String');
        setting.netcdf_file = ...
            get(get_control(parent, 'netcdf file'), 'String');
        setting.calibration_file = ...
            get(get_control(parent, 'calibration file'), 'String');
        setting.voyage_inf = ...
            get(get_control(parent, 'inf file'), 'String');
        setting.metadata_file = ...
            get(get_control(parent, 'metadata file'), 'String');
        setting.netcdf_directory = ...
            get(get_control(parent, 'netcdf directory'), 'String');
        setting.ex_netcdf_directory = ...
            get(get_control(parent, 'extended netcdf directory'), 'String');
        
        % numerics
        setting.time_block = ...
            str2double(get(get_control(parent, 'time block'), 'String'));
        if isnan(setting.time_block) || setting.time_block <= 0
            % TODO display message dialog
            warndlg('Can''t understand time block, must be a valid number');
            error('Can''t understand time block, must be a valid number');
        end
        setting.time_offset = ...
            str2double(get(get_control(parent, 'time offset'), 'String'));
        if isnan(setting.time_offset)
            warndlg('Can''t understand time offset, must be a valid number');
            error('Can''t understand time offset, must be a valid number');
        end
        setting.time_offset = setting.time_offset * ...
            60 ^ (3 - get(get_control(parent, 'time offset units'), 'Value'));
        setting.fixed_layer = ...
            str2double(get(get_control(parent, 'fixed layer'), 'String'));
        if isnan(setting.fixed_layer)
            warndlg('Can''t understand DSL fixed layer depth, must be a valid number');
            error('Can''t understand DSL fixed layer depth, must be a valid number');
        end
        
        % checkboxes
        setting.create_ev_files = ...
            get(get_control(parent, 'create_ev_files'), 'Value') == ...
            get(get_control(parent, 'create_ev_files'), 'Max');
        setting.skip_ev_files = ...
            get(get_control(parent, 'read netcdf'), 'Value') == ...
            get(get_control(parent, 'read netcdf'), 'Max');
        setting.review_ev_files = ...
            get(get_control(parent, 'review_ev_files'), 'Value') == ...
            get(get_control(parent, 'review_ev_files'), 'Max');
        setting.export_import_HAC = ...
            get(get_control(parent, 'export_import_HAC'), 'Value') == ...
            get(get_control(parent, 'export_import_HAC'), 'Max');
        setting.export_HAC = ...
            get(get_control(parent, 'export_HAC'), 'Value') == ...
            get(get_control(parent, 'export_HAC'), 'Max');
        setting.export_HAC = ...
            get(get_control(parent, 'import_HAC'), 'Value') == ...
            get(get_control(parent, 'import_HAC'), 'Max');
        setting.export_sv = ...
            get(get_control(parent, 'export_sv'), 'Value') == ...
            get(get_control(parent, 'export_sv'), 'Max');
        setting.read_echointegration = ...
            get(get_control(parent, 'read echointegration'), 'Value') == ...
            get(get_control(parent, 'read echointegration'), 'Max');
        setting.merge = ...
            get(get_control(parent, 'merge'), 'Value') == ...
            get(get_control(parent, 'merge'), 'Max');
        setting.read_merge = ...
            get(get_control(parent, 'read merge'), 'Value') == ...
            get(get_control(parent, 'read merge'), 'Max');
        setting.read_netcdf = ...
            get(get_control(parent, 'read netcdf'), 'Value') == ...
            get(get_control(parent, 'read netcdf'), 'Max');
        setting.read_ecs = ...
            get(get_control(parent, 'read ecs'), 'Value') == ...
            get(get_control(parent, 'read ecs'), 'Max');
        setting.read_inf = ...
            get(get_control(parent, 'read inf'), 'Value') == ...
            get(get_control(parent, 'read inf'), 'Max');
        setting.read_meta = ...
            get(get_control(parent, 'read metadata'), 'Value') == ...
            get(get_control(parent, 'read metadata'), 'Max');
        setting.synTS = ...
            get(get_control(parent, 'synTS'), 'Value') == ...
            get(get_control(parent, 'synTS'), 'Max');
        setting.CARS = ...
            get(get_control(parent, 'CARS'), 'Value') == ...
            get(get_control(parent, 'CARS'), 'Max');
        setting.npp = ...
            get(get_control(parent, 'npp'), 'Value') == ...
            get(get_control(parent, 'npp'), 'Max');
        setting.sound_speed = ...
            get(get_control(parent, 'sound_speed'), 'Value') == ...
            get(get_control(parent, 'sound_speed'), 'Max');
        setting.netcdf = ...
            get(get_control(parent, 'netcdf'), 'Value') == ...
            get(get_control(parent, 'netcdf'), 'Max');
        setting.viz = ...
            get(get_control(parent, 'viz'), 'Value') == ...
            get(get_control(parent, 'viz'), 'Max');
        setting.detect_seafloor = ...
            get(get_control(parent, 'detect_seafloor'), 'Value') == ...
            get(get_control(parent, 'detect_seafloor'), 'Max');
        setting.detect_upper_DSL = ...
            get(get_control(parent, 'detect_upper_DSL'), 'Value') == ...
            get(get_control(parent, 'detect_upper_DSL'), 'Max');
        setting.detect_fixed = ...
            get(get_control(parent, 'detect_fixed'), 'Value') == ...
            get(get_control(parent, 'detect_fixed'), 'Max');
        setting.create_alt_ev_files = ...
            get(get_control(parent, 'create_alt_ev_files'), 'Value') == ...
            get(get_control(parent, 'create_alt_ev_files'), 'Max');
        setting.include_pitch = ...
            get(get_control(parent, 'include_pitch'), 'Value') == ...
            get(get_control(parent, 'include_pitch'), 'Max');
        setting.include_roll = ...
            get(get_control(parent, 'include_roll'), 'Value') == ...
            get(get_control(parent, 'include_roll'), 'Max');
        setting.use_alt_ev_files = ...
            get(get_control(parent, 'use_alt_ev_files'), 'Value') == ...
            get(get_control(parent, 'use_alt_ev_files'), 'Max');
        setting.export_reference = ...
            get(get_control(parent, 'export_reference'), 'Value') == ...
            get(get_control(parent, 'export_reference'), 'Max');
        setting.export_final = ...
            get(get_control(parent, 'export_final'), 'Value') == ...
            get(get_control(parent, 'export_final'), 'Max');
        setting.export_reject = ...
            get(get_control(parent, 'export_reject'), 'Value') == ...
            get(get_control(parent, 'export_reject'), 'Max');
        setting.export_reject = ...
            get(get_control(parent, 'export_noise'), 'Value') == ...
            get(get_control(parent, 'export_noise'), 'Max');
        setting.export_reject = ...
            get(get_control(parent, 'export_background'), 'Value') == ...
            get(get_control(parent, 'export_background'), 'Max');
        setting.extended = ...
            get(get_control(parent, 'extended netcdf'), 'Value') == ...
            get(get_control(parent, 'extended netcdf'), 'Max');
        setting.single_format = ...         % check box has opposite meaning
            get(get_control(parent, 'single format'), 'Value') ~= ...
            get(get_control(parent, 'single format'), 'Max');
        setting.review_metadata = ...
            get(get_control(parent, 'review metadata'), 'Value') == ...
            get(get_control(parent, 'review metadata'), 'Max');
        setting.matlab_view = ...
            get(get_control(parent, 'matlab_view'), 'Value') == ...
            get(get_control(parent, 'matlab_view'), 'Max');
        setting.zap = ...
            get(get_control(parent, 'zap'), 'Value') == ...
            get(get_control(parent, 'zap'), 'Max');
        setting.review_ex_metadata = ...    % shared checkbox
            get(get_control(parent, 'review metadata'), 'Value') == ...
            get(get_control(parent, 'review metadata'), 'Max');
       
        setting.HAC = [];
        for h = 1:5
            if  get(get_control(parent, ['HAC' num2str(h)]), 'Value') == ...
                get(get_control(parent, ['HAC' num2str(h)]), 'Max')
                setting.HAC(end+1) = h;
            end
        end
        
        if  get(get_control(parent, 'speed_coppens'), 'Value') == ...
            get(get_control(parent, 'speed_coppens'), 'Max')
            setting.soundspeed_formula = 'Coppens';
        end
        if  get(get_control(parent, 'speed_mackenzie'), 'Value') == ...
            get(get_control(parent, 'speed_mackenzie'), 'Max')
            setting.soundspeed_formula = 'Mackenzie';
        end
        if  get(get_control(parent, 'speed_gsw'), 'Value') == ...
            get(get_control(parent, 'speed_gsw'), 'Max')
            setting.soundspeed_formula = 'GSW';
        end
        if  get(get_control(parent, 'absorption_francois'), 'Value') == ...
            get(get_control(parent, 'absorption_francois'), 'Max')
            setting.soundabsorption_formula = 'Francois';
        end
        if  get(get_control(parent, 'absorption_doonan'), 'Value') == ...
            get(get_control(parent, 'absorption_doonan'), 'Max')
            setting.soundabsorption_formula = 'Doonan';
        end

        setting.channels = get(get_control(parent, 'add_channel'),'User');
        setting.channel = {};
        setting.frequency = [];
        for ch = 1:length(setting.channels);
            button = get_control(parent, ['channel ' num2str(ch)]);
            setting.frequencies(ch) = get(button, 'User');
            if get(button, 'Value') == get(button, 'Max')
                setting.channel{end + 1} = get(button, 'String');
                setting.frequency(length(setting.channel)) = get(button, 'User');
            end
        end
        
        % popupmenus
        platform =  get_control(parent, 'platform');
        platfrms = get(platform, 'String');
        setting.platform = platfrms{get(platform, 'Value')};

        % metadata
        setting.meta = get(get_control(parent, 'metadata'), 'User');
        if exist(setting.template, 'file')
            setting.meta.Echoview_template = setting.template;
        end
        
        % progress callback
        setting.progress=@progress;       
    end

end
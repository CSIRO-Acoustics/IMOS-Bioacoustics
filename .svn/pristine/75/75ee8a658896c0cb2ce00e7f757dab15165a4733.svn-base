head	1.3;
access;
symbols;
locks
	dun216:1.3; strict;
comment	@// @;


1.3
date	2007.08.16.23.47.33;	author dun216;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.16.23.45.40;	author dun216;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.15.02.03.39;	author dun216;	state Exp;
branches;
next	;


desc
@Access to  2004 "Decade of SST" composites.
@


1.3
log
@New version to cope with file sequence containing bothyearly and
6-monthly files.)  JRD 17/8/07
@
text
@% GET_SST_XYT  Retrieve data to given times and locations from the 2004
%   4km Stitched SST Archive.   Note: only actually interpolates for 15-day 
%   composites as these are at 6-day spacing. 10-day composites are at 2-day
%   spacing, and all the rest at 1-day, so we just take nearest time slice
%   for all of these.
%
% NOTE:  Uses Matlab interp functions which give a Nan if any adjacent 
%        input value is Nan, so data recovery rates can be poor for
%        small-time-window composites (which have more gaps.)
%
%  See also GET_SST, which returns fuul-res SST dataset grid in given region,
%  and GET_SST_XY, which interpolates in space but evaluates all points at 
%  just one time value.
%
% INPUT
%  x,y  - vector or matrices of locations
%  tim  - Unix time for each location (can use greg2time)
%  itper- single code for composite time-window size:
%        1=1   2=3  3=6day  4=10day  5=15day
%
% OUTPUT
%  sst  - SST at x,y locations (nan where no data available)
%
% SEE ALSO: ~ridgway/matlab/altim/get_sstPW_xyt.m  for access to "Patchwork"
%
% SEE http://www.marine.csiro.au/remotesensing/oceancurrents/  OR
%     http://www.marine.csiro.au/eez_data/doc/sst_datasets.html
%
% Jeff Dunn  CSIRO CMAR 10/6/04, 16/8/07
%
% USAGE: sst = get_sst_xyt(x,y,tim,itper)

function sst = get_sst_xyt(x,y,tim,itper)

% ABOUT Algorithm
%
% Have tried many ways with this code, and each is very slow for some given
% situation. For sparse data extracting a chunk spanning the whole time of
% a file, and interpolating in that, is much more costly than doing lots
% of little extractions for just the times required. This present coding is
% a compromise, with some attempt to keep the code simple but fast.

sst = repmat(nan,size(x));

t70 = greg2time([1970 1 1 0 0 0]);
tperiod = [1 3 6 10 15];
tper = tperiod(itper);
tdel = [1 1 1 2 6];
tdel = tdel(itper);
tstart = [34241.5 34242.5 34244 34247 34248.5];
tstart = tstart(itper);

fnm = platform_path('rsj','imgjj/sensor/avhrr/sstcr04/yearfiles/');
fnm = [fnm 'SSTcomp' num2str(tper) 'd_Aasia_'];

la = getnc([fnm '1994'],'lat');
lo = getnc([fnm '1994'],'lon');

kk = find(x>min(lo) & x<max(lo) & y>min(la) & y<max(la) & tim>tstart);

% x spacing .042 degree, y .036 degree, y stored in descending order!
nlo = length(lo);
ix = 1+(x-min(lo))./.042;
nla = length(la);
iy = nla+1-((y-min(la))./.036);


fnam = sst_filnam(min(tim(kk)),fnm);

while ~isempty(kk) && exist([fnam '.nc'],'file')

   ftim = getnc(fnam,'time') + t70;
   ntim = length(ftim);
   
   itm = 1+((tim(kk)-ftim(1))./tdel);
   
   if tdel > 2
      % 15 day window composites at 6 day spacings: interpolate time
      
      jj = find(itm<ntim);
      itm = itm(jj);
      kj = kk(jj);
   

      for ll = unique(floor(itm(:)'))
	 mm = find(itm>=ll & itm<ll+1);
	 
	 xs = ix(kj(mm));
	 ys = iy(kj(mm));	    
	 x0 = max([1 floor(min(xs))]);
	 y0 = max([1 floor(min(ys))]);
	 x1 = min([nlo ceil(max(xs))]);
	 y1 = min([nla ceil(max(ys))]);
	 
	 if ll == 0
	    % Times in gap between this and preceding file
	    fnaml = sst_filnam(min(tim(kj))-2*tdel,fnm);
	    ltim = getnc(fnaml,'time') + t70;
	    nltm = length(ltim);
	    sstl = getnc(fnaml,'sst',[nltm y0 x0],[nltm y1 x1]);
	    sstf = getnc(fnam,'sst',[1 y0 x0],[1 y1 x1]);
	    sstf = cat(1,shiftdim(sstl,-1),shiftdim(sstf,-1));
	 else
	    sstf = getnc(fnam,'sst',[ll y0 x0],[ll+1 y1 x1]);
	 end
	 
	 sst(kj(mm)) = interp3(sstf,1+ys-y0,1+rem(itm(mm),1),1+xs-x0);
      end
   
   else
      % 1 or 2 day spaced estimates - just select nearest time slice.
	 
      itm = round(itm);
      jj = find(itm>=1 & itm<=ntim);
      itm = itm(jj);
      kj = kk(jj);
	 
      for ll = unique(itm(:)')
	 mm = find(itm==ll);
	 if ~isempty(mm)
	    xs = ix(kj(mm));
	    ys = iy(kj(mm));	    
	    x0 = max([1 floor(min(xs))]);
	    y0 = max([1 floor(min(ys))]);
	    x1 = min([nlo ceil(max(xs))]);
	    y1 = min([nla ceil(max(ys))]);
	    sstf = getnc(fnam,'sst',[ll y0 x0],[ll y1 x1]);
	    sst(kj(mm)) = interp2(sstf,1+xs-x0,1+ys-y0);
	 end
      end   
   end

   kk(jj) = [];
   if ~isempty(kk)
      fnam = sst_filnam(min(tim(kk))+2*tdel,fnm);
   end
end      

%---------------------------------------------------------------------------
@


1.2
log
@Final state before major recoding (mainly to cope with the data
file sequence which in 2005 changes from yearly to 6-monthly files.)
The old version may in some cases have been faster.
@
text
@d29 1
a29 1
% Jeff Dunn  CSIRO CMR 10/6/04 
d35 8
a46 1

d48 4
d59 1
a59 1
kk = find(x>min(lo) & x<max(lo) & y>min(la) & y<max(la));
a66 15
stim = t70 + [8674.5 8675.5 8677 8680 8681.5];
etim = t70 + [12216.5 12215.5 12214 12212 12209.5];
    

for iyr = 1993:2003
   if iyr == 1993
      t0 = stim(itper);
   else
      t0 = greg2time([iyr 1 1 0 0 0]);
   end
   if iyr == 2003
      t1 = etim(itper);
   else
      t1 = greg2time([iyr+1 1 1 0 0 0]);
   end
d68 1
a68 1
   jj = find(tim(kk)>=t0 & tim(kk)<t1);
d70 1
a70 2
   if ~isempty(jj)
      kj = kk(jj);
d72 7
a78 3
      ftim = getnc([fnm num2str(iyr)],'time');
      ntim = length(ftim);
      tdel = ftim(2)-ftim(1);
d80 4
a83 2
      if tper == 15 
	 % 15 day window composites at 6 day spacings: interpolate time
d85 20
a104 45
	 itm = 1+((tim(kj)-(ftim(1)+t70))./tdel);

	 for ll = floor(min(itm)):ceil(max(itm))
	    mm = find(itm>=ll & itm<ll+1);
	    if ~isempty(mm)
	       kjm = kj(mm);
	       ys = iy(kjm);
	       xs = ix(kjm);
	       x0 = floor(min(xs));
	       y0 = floor(min(ys));
	       x1 = min([nlo ceil(max(ix(kjm)))]);
	       y1 = min([nla ceil(max(iy(kjm)))]);
	       crn1 = [ll y0 x0];
	       crn2 = [ll+1 y1 x1];

	       if ll==0 & iyr==1993
		  % Cannot do anything here - no previous data
	       elseif ll==ntim & iyr==2003
		  % Cannot do anything here - beyond end of data
	       else
		  if ll==0
		     % Times in gap between this and preceding file
		     tmp = getnc([fnm num2str(iyr-1)],'time');
		     nn = length(tmp);
		     crn1(1) = nn;
		     crn2(1) = nn;
		     ssin = getnc([fnm num2str(iyr-1)],'sst',crn1,crn2);
		     crn1(1) = 1;
		     crn2(1) = 1;
		     ssin = cat(3,ssin,getnc([fnm num2str(iyr)],'sst',crn1,crn2));
		  elseif ll==ntim
		     % Times in gap between this and following file
		     crn1(1) = ntim;
		     crn2(1) = ntim;
		     ssin = getnc([fnm num2str(iyr)],'sst',crn1,crn2);
		     crn1(1) = 1;
		     crn2(1) = 1;
		     ssin = cat(3,ssin,getnc([fnm num2str(iyr+1)],'sst',crn1,crn2));
		  else
		     ssin = getnc([fnm num2str(iyr)],'sst',crn1,crn2);
		  end
		  ssin = shiftdim(ssin,2);
		  sst(kjm) = interp3(ssin,1+rem(itm(mm),1),1+xs-x0,1+ys-y0);
	       end
	    end	       
d107 5
a111 2
      else
	 % 1 or 2 day spaced estimates - just select nearest time slice.
d113 4
a116 5
	 itm = 1+round((tim(kj)-(ftim(1)+t70))./tdel);
	 ii = find(itm>ntim);
	 itm(ii) = ntim;
	 ii = find(itm<1);
	 itm(ii) = 1;
d118 14
a131 14
	 for ll = min(itm):max(itm)
	    mm = find(itm==ll);
	    if ~isempty(mm)
	       kjm = kj(mm);
	       ys = iy(kjm);
	       xs = ix(kjm);
	       x0 = max([1 floor(min(xs))]);
	       y0 = max([1 floor(min(ys))]);
	       x1 = min([nlo ceil(max(ix(kjm)))]);
	       y1 = min([nla ceil(max(iy(kjm)))]);
	       crn1 = [ll y0 x0];
	       crn2 = [ll y1 x1];

	       ssin = getnc([fnm num2str(iyr)],'sst',crn1,crn2);
d133 3
a135 6
	       sst(kjm) = interp2(ssin,1+xs-x0,1+ys-y0);
	    end
	 end
      end
      
      kk(jj) = [];
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
% GET_SST_XYT  Interpolate data to given times and locations from the 2004
%   4km Stitched SST Archive. Note: only actually interpolates for 15-day 
d9 1
a9 1
%        small-window composites.
d11 3
a13 3
%  See also GET_SST, which returns SST dataset grid in given region, and
%  GET_SST_XY, which interpolates in space but evaluates all points at just
%  one time value.
d24 4
a27 1
% SEE http://www.marine.csiro.au/remotesensing/oceancurrents/
d42 2
a43 1
fnm = ['/home/imgjj/dataset/sst/cr04/SSTcomp' num2str(tper) 'd_Aasia_'];
d51 1
d94 2
d97 1
a97 1
	       crn2 = [ll+1 ceil(max(iy(kjm))) ceil(max(ix(kjm)))];
d135 4
d146 4
a149 2
	       x0 = floor(min(xs));
	       y0 = floor(min(ys));
d151 1
a151 1
	       crn2 = [ll ceil(max(iy(kjm))) ceil(max(ix(kjm)))];
@

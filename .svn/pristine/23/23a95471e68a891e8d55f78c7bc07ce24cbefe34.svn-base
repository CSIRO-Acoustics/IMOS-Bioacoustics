function [cdata, rdata, tdata, bdata, sdata, mdata] = convert_resample_to_stdcsv(csvfilelist)
% function to convert resampled outputs to standard csv format ready for
% use by process_BASOOP
%
% Tim Ryan 16/05/2017
%
% precondition. csvfile list is supplied with files in the correct order as
% per list below                 

rawdatafile = cell2mat(csvfilelist(~cellfun('isempty',regexp(csvfilelist,'Raw_Sv'))));
rawnumsamples = cell2mat(csvfilelist(~cellfun('isempty',regexp(csvfilelist,'Raw_number_samples'))));
cleandatafile = cell2mat(csvfilelist(~cellfun('isempty',regexp(csvfilelist,'cleaned'))));
rejectdatafile = cell2mat(csvfilelist(~cellfun('isempty',regexp(csvfilelist,'Reject'))));
SNRdatafile = cell2mat(csvfilelist(~cellfun('isempty',regexp(csvfilelist,'Noise'))));
BNdatafile = cell2mat(csvfilelist(~cellfun('isempty',regexp(csvfilelist,'Background'))));
MCdatafile = cell2mat(csvfilelist(~cellfun('isempty',regexp(csvfilelist,'Motion'))));
%rawdatafile = csvfilelist{3};
%rawnumsamples = csvfilelist{7};
%cleandatafile = csvfilelist{2};
%rejectdatafile = csvfilelist{4};
%SNRdatafile = csvfilelist{5};
%BNdatafile = csvfilelist{6};
%keyboard
%MCdatafile = csvfilelist{6};
[cdata] = process_cdata(cleandatafile);               
[rdata] = process_rdata(rawdatafile,rawnumsamples, cdata);
[tdata] = process_tdata(rejectdatafile , cdata);    
[sdata] = process_sdata(SNRdatafile, cdata);
[bdata] = process_bdata(BNdatafile, cdata);
[mdata] = process_mdata(MCdatafile, cdata);

function [cdata] = process_cdata(cleandatafile)
    % read the csv file. 
        warning off;        
        csvdata= readtable(cleandatafile,'header',0);
        warning on;
        csvdata.Properties.VariableNames(1) = {'Ping_index'}; % fix up the annoying UTF-8 byte order that is screwing up Ping_index 
    % Sv first column - needed
        Sv_first_col = 14;
    % matrix and vector dimensions
        [m,n] = size(csvdata);
        p = n - Sv_first_col + 1; % number of Sv columns
    % Ping index    
        Ping_index = int32(1:1:m-1);
        Ping_index = repmat(Ping_index',1,p);
        Ping_index = reshape(Ping_index',1,[]);    
    % reshape to create vectors of the data
    % 
    % Sv data goes from Var 14 to 'end'                    
        csvdata.Var14(csvdata.Var14<-999) = NaN; % first colummn null values so set to NaN        
        Svdata = table2array(csvdata(:,14:end));    
        Sv_mean = reshape(Svdata',1,[]);
        Sv_mean(Sv_mean<-998) = NaN; % set -999 to NaN
    % Layer
        Layer = int32(1:1:(n-Sv_first_col+1));
        Layer = repmat(Layer,1,m);
        Layer = reshape(Layer',1,[]);
    % Depth mean min and max vectors
        vert_res = (csvdata.Depth_stop(1) - csvdata.Depth_start(1)) / csvdata.Sample_count(1);
        Depth_mean = csvdata.Depth_start + 5 : vert_res : csvdata.Depth_stop;
        [m,n] = size(csvdata);
        Depth_mean = repmat(Depth_mean,1,m);
        Depth_mean = reshape(Depth_mean',1,[]);
        Depth_min = Depth_mean - 5;
        Depth_max = Depth_mean + 5;
    % Height mean vector
        Height_mean = repmat(Depth_mean(2) - Depth_mean(1),1,m * p);
    % Ping date
        Ping_date = repmat(csvdata.Ping_date,1,p);
        Ping_date = reshape(Ping_date',1,[])';        
        Ping_date = cellstr(num2str(yyyymmdd(Ping_date)));        
    % Ping time    
        Ping_time = csvdata.Ping_time + milliseconds(csvdata.Ping_milliseconds);
        Ping_time.Format = 'hh:mm:ss.SSS';
        Ping_time = repmat(Ping_time,1,p);
        Ping_time = cellstr(reshape(Ping_time',1,[]));                        
    % Latitude
        Latitude = csvdata.Latitude;
        Latitude = repmat(Latitude,1,p);
        Latitude = reshape(Latitude',1,[])';
    % Longitude
        Longitude = csvdata.Longitude;
        Longitude = repmat(Longitude,1,p);
        Longitude = reshape(Longitude',1,[])';
    % Skew, Kurtosis,Stdev placeholders
        Skew = ones(length(Latitude),1)*NaN;
        Kurtosis = ones(length(Latitude),1)*NaN;
        Stdev = ones(length(Latitude),1)*NaN;
              
        cdata = [{Ping_index} {Layer} {Sv_mean} {Height_mean} {Depth_mean} {Depth_min}, ...
                 {Depth_max} {Ping_date} {Ping_time'} {Latitude'} {Longitude'}, ...
                 {Stdev'} {Skew'} {Kurtosis'}];
             
             
keyboard             
     % note in original code Depth_min,Depth_max were cells, here they are doubls - not sure if it matters but if it does will need to adjust above code to convert from doubles to cells with number as strings        
    
% % % % % %    Original code    
% % % % % %     fid1 = fopen(cleandatafile,'r');    
% % % % % %     hdr = trim(fgetl(fid1)); % Remove UTF-8 Byte Order Mark (ef bb bf) from header line if present using trim funcion
% % % % % %     hdr = [hdr ',']; % add an end point
% % % % % %     hdrdlm = strfind(hdr,','); % location of header delimiters
% % % % % %     hdrdlm = [0 hdrdlm]; % add starting point
% % % % % %     for i=1:length(hdrdlm)-1
% % % % % %         hdrnames{i} = strtrim(hdr(hdrdlm(i)+1:hdrdlm(i+1)-1));
% % % % % %     end
% % % % % %     xvarnames = [{'Sv_mean'},{'Layer'},{'Height_mean'},{'Depth_mean'},{'Depth_min'},{'Depth_max'},{'Layer'},{'Skew'},{'Kurtosis'},{'Stdev'}];
% % % % % %     for i=1:length(xvarnames)
% % % % % %         eval([xvarnames{i} '= [];'])
% % % % % %     end
% % % % % %     % initialise
% % % % % %         for i=1:length(hdrnames)        
% % % % % %             eval([hdrnames{i} ' = [];' ]);
% % % % % %         end
% % % % % %         while ~feof(fid1) 
% % % % % %             ln = trim(fgetl(fid1)); % read a line
% % % % % %                 dlm = strfind(ln,','); % locate comma dlimiters
% % % % % %                 vars = ln(1:dlm(length(hdrdlm))-1);   % pull out the variable data associated with headres
% % % % % %                 vardlm = strfind(vars,',');   % locate delimiters associated with variable data
% % % % % %                 vardlm = [1 vardlm];  % add a start point to vector of delimiter locations                                                   
% % % % % %             dta = ln(dlm(length(hdrdlm)-1)+1:end); % vector of data values
% % % % % %             dtadlm = strfind(dta,',');   % location of comma delimters associated with data values
% % % % % %             dtadlm = [1 dtadlm length(dta)]; % add start and end points        
% % % % % %             for i=1:length(dtadlm)-1
% % % % % %                 Sv(i) = str2num(dta(dtadlm(i): dtadlm(i+1)-1)); % put data values into a vector
% % % % % %             end                                        
% % % % % %             Sv_mean = [Sv_mean Sv];              
% % % % % %             
% % % % % %             for i=1:length(hdrnames)                   
% % % % % %                 eval(['vardata = {(strtrim(strrep((ln(vardlm(i): vardlm(i+1)-1)),'','',''''))) ;};' ]); % set header values equalt to variable values  
% % % % % %                 % now generate a vector of values for each header parameter,
% % % % % %                 % vector length is equal to the length of the data vector
% % % % % %                 % eval(['repmatdata = repmat(' hdrnames{i} ',1,length(datavec));']);                        
% % % % % %                 eval(['repmatdata = repmat( vardata ,1,length(Sv));']);                                               
% % % % % %                 eval([hdrnames{i} '= [' hdrnames{i} '  repmatdata ];']);                         
% % % % % %             end            
% % % % % %             Lyer = 1:1:length(Sv); % create the layer index
% % % % % %             Layer = [Layer Lyer];
% % % % % %             
% % % % % %             int = (str2num(Range_stop{1}) - str2num(Range_start{1})) / str2num(Sample_count{1}); % assummes Range_stop, Range_start and Sample_count are the same throughout, which would be true as resample data comes out as matrix of values
% % % % % %             Dpth_mean = str2num(Range_start{1})+int/2 :int: str2num(Range_stop{1})-int/2';        
% % % % % %             Dpth_min = Dpth_mean - int/2';        
% % % % % %             Dpth_max = Dpth_mean + int/2';        
% % % % % %             Height_mean = [Height_mean (Dpth_max-Dpth_min)];
% % % % % %             Depth_mean = [Depth_mean Dpth_mean]; % appeand        
% % % % % %             Depth_min = [Depth_min Dpth_min]; % appeand        
% % % % % %             Depth_max = [Depth_max Dpth_max]; % appeand        
% % % % % % 
% % % % % %             % place holder for std, skew and kurtosis        
% % % % % %             Skw = ones(length(Sv),1)'*NaN;
% % % % % %             Skew = [Skew Skw]; %append
% % % % % %             Kurt =  ones(length(Sv),1)'*NaN;
% % % % % %             Kurtosis = [Kurtosis Kurt]; %append
% % % % % %             Std = ones(length(Sv),1)'*NaN;
% % % % % %             Stdev = [Stdev Std]; % append                       
% % % % % %         end  
% % % % % %         for i=1:length(Ping_index)
% % % % % %             P_ind(i) = str2num(Ping_index{i}); % convert to integer         
% % % % % %         end
% % % % % %         
% % % % % %         % a bit of massaging to make sure frmt is same as Gordon's
% % % % % %         % implementation
% % % % % %         Ping_index = int32(P_ind);
% % % % % %         Layer = int32(Layer);
% % % % % %         Ping_date =strrep(Ping_date','-','');                        
% % % % % %         for i=1:length(Ping_time)
% % % % % %             Millisec = Ping_milliseconds{i};
% % % % % %             Millisec = Millisec(1:3);
% % % % % %             Ping_time{i} =  strtrim(sprintf('%s.%s\n',Ping_time{i}, Millisec));
% % % % % %             a(i) =  {num2str(Depth_min(i))};
% % % % % %             b(i) =  {num2str(Depth_max(i))};            
% % % % % %         end
% % % % % %         Depth_min = a'; Depth_max = b';           
% % % % % %         Sv_mean(Sv_mean<-998) = NaN; % kick out bad data values (e.g. -9.9e37)
% % % % % %         cdata = [{Ping_index} {Layer} {Sv_mean} {Height_mean} {Depth_mean} {Depth_min}, ...
% % % % % %                  {Depth_max} {Ping_date} {Ping_time'} {Latitude'} {Longitude'}, ...
% % % % % %                  {Stdev'} {Skew'} {Kurtosis'}];
% % % % % %              keyboard
             
function [rdata] = process_rdata(rawdatafile, rawnumsamples, cdata)
    % takes raw data file and pulls out Sv values. then extracts number of good
    % samples from rawnumsamples file. adds columns from cdata as needed to
    % match original structure that Gordon used.                        
        Sv_raw = extract_datavals(rawdatafile); % call to function
        Sv_raw(Sv_raw<-998) = NaN; % kick out bad data values (e.g. -9.9e37);
        
        No_Raw_Samples = extract_datavals(rawnumsamples);
        No_Raw_Samples(No_Raw_Samples<-998) = NaN; % kick out bad data values (e.g. -9.9e37);
        
        rdata = [cdata{1} cdata{2} {Sv_raw} {int32(No_Raw_Samples)'} cdata{12} cdata{13} cdata{14}];         

        
function [mdata] = process_mdata(rawdatafile, cdata)
    % takes raw data file and pulls out Sv values. then extracts number of good
    % samples from rawnumsamples file. adds columns from cdata as needed to
    % match original structure that Gordon used.            
        mc_dbdiff = extract_datavals(rawdatafile); % call to function
        mc_dbdiff(mc_dbdiff<-998) = NaN; % kick out bad data values (e.g. -9.9e37);        
        mdata = [cdata{1} cdata{2} {mc_dbdiff'}];                
        
function [tdata] = process_tdata(rejectdatafile, cdata)
        % pull out number of samples left in clean data plus first two columns of cdata        
        No_Clean_Samples = extract_datavals(rejectdatafile); % call to function
        No_Clean_Samples(No_Clean_Samples<-998) = NaN; % kick out bad data values (e.g. -9.9e37);        
        tdata = [cdata{1} cdata{2} {int32(No_Clean_Samples)'}];

function [sdata] = process_sdata(SNRdatafile, cdata)
        % pull out SNR data data plus first two columns of cdata        
        SNR = extract_datavals(SNRdatafile); % call to function
        SNR(SNR<-998) = NaN; % kick out bad data values (e.g. -9.9e37);        
        sdata = [cdata{1} cdata{2} {SNR'}];
        
function [bdata] = process_bdata(BNdatafile, cdata)
        % pull out BN data plus first two columns of cdata        
        BN = extract_datavals(BNdatafile); % call to function
        BN(BN<-998) = NaN; % kick out bad data values (e.g. -9.9e37); 
        for i=1:length(BN)
            b(i) = {BN(i)};
        end
        BN = b;        
        bdata = [cdata{1} cdata{2} {BN'}];
                                   
function datavals = extract_datavals(datafilename)  
        warning off;                
        csvdata = readtable(datafilename, 'header',0);
        warning on;
        data_first_col = 14;
    % matrix and vector dimensions
        [m,n] = size(csvdata);
        p = n - data_first_col + 1; % number of Sv columns    
    % reshape to create vectors of the data
    % 
    % data goes from Var 14 to 'end'                    
        csvdata.Var14(csvdata.Var14<-999) = NaN; % first colummn null values so set to NaN        
        datavals = table2array(csvdata(:,data_first_col:end));    
        datavals = reshape(datavals',1,[]);
        datavals(datavals<-998) = NaN; % set -999 to NaN

        
        
        
% % % % %     %% old code
% % % % %         fid1 = fopen(datafilename,'r');        
% % % % %         hdr = trim(fgetl(fid1)); % Remove UTF-8 Byte Order Mark (ef bb bf) from header line if present using trim funcion
% % % % %         hdr = [hdr ',']; % add an end point
% % % % %         hdrdlm = strfind(hdr,','); % location of header delimiters
% % % % %         hdrdlm = [0 hdrdlm]; % add starting point
% % % % %         % pull out the data values
% % % % %         datavals=[];
% % % % %         while ~feof(fid1) 
% % % % %             ln = trim(fgetl(fid1)); % read a line
% % % % %             dlm = strfind(ln,','); % locate comma dlimiters
% % % % %             dta = ln(dlm(length(hdrdlm)-1)+1:end); % vector of data values
% % % % %             dtadlm = strfind(dta,',');   % location of comma delimters associated with data values
% % % % %             dtadlm = [1 dtadlm length(dta)]; % add start and end points        
% % % % %             for i=1:length(dtadlm)-1
% % % % %                 Dta(i) = str2num(dta(dtadlm(i): dtadlm(i+1)-1)); % put data values into a vector
% % % % %             end                                        
% % % % %             datavals = [datavals Dta];                                                       
% % % % %         end          
% % % % %         fclose(fid1);
% % % % %              
function line = trim(line)
% Remove UTF-8 Byte Order Mark (ef bb bf) from header line if present
%
if  strncmp(line, ['' 239 187 191], 3)          % UTF-8 - used by EchoView 4 & 5
    line = line(4:end);
end
line=strtrim(line);


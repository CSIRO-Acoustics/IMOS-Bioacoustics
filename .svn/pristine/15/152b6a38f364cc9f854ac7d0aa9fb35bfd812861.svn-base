function export_sv(EvApp, control, ev_filelist)
% Export Sv from EchoView worksheets to .csv files
%
% Inputs:
%   EvApp       a handle to a COM object of an EchoviewApplication.
%   control     structure containing the following fields:
%       echointegration_directory   name of directory to write .csv files
%                                   in 'echointegration_output'
%       Grid_height                 height of grid to generate
%       Grid_distance               interval of grid to generate
%       export_reference            flag export reference variable?
%       export_reference_variable_name  'HAC Sv %s'
%       export_final                flag export final variable?
%       export_final_variable_name  'Final_%s_cleaned'
%       export_reject               flag export reject variable?
%       export_rejectdata_variable_name 'Reject_%s'      
%       channel                     cell array of channels to export
%   ev_filelist list of worksheets to export from    
% 

   [path, ~, ~] = fileparts(ev_filelist{1});
    [path, ~, ~] = fileparts(ev_filelist{1});
    [path, ~, ~] = fileparts(path);
    
    if isempty(EvApp)
        EvApp = actxserver(control.EvApp);
    end
    
    Echointegration_Output_dir = fullfile(path, control.echointegration_directory);
    if ~isdir(Echointegration_Output_dir)
        mkdir(Echointegration_Output_dir)
    end
keyboard
    for i=1:length(ev_filelist)
        if control.verbosity > 1
            fprintf('%s: Exporting %d of %d\n', datestr(now,'HH:MM:SS'), i, length(ev_filelist));
        mkdir(Echointegration_Output_dir);
    end

    % export the version information
    fid = fopen([Echointegration_Output_dir '\Echoview_version.txt'],'w+');
    fprintf(fid, '%s\n',EvApp.version);
    fclose(fid);
    % now export out the csv files, either echointegration_by_cells
    % (standard version) or export in resampled csv format
    for i=1:length(ev_filelist)
        if control.verbosity > 1
            fprintf('%s: Exporting %d of %d\n', datestr(now,'HH:MM:SS'), i, length(ev_filelist));
        end
        [~, name, ~] = fileparts(ev_filelist{i});
        try
            EvFile = EvApp.OpenFile(ev_filelist{i});
        catch exception
            fprintf('Stopped at %s line %d because of:\n%s\n', ...
                exception.stack(1).file, exception.stack(1).line, exception.message);
            fprintf('type "dbcont" and press Enter to continue\n');
            keyboard           
        end
        
        if isempty(EvFile)
            error('Unable to open %s', ev_filelist{i});
        end
        if ~iscell(control.channel)
            control.channel = {control.channel};
        end
        
        
        for channel = control.channel            
            % reference variable - i.e. unfiltered data
            if control.export_reference & ~control.export_sv_fast % go via standard processing
                try
                    reference_variable = sprintf(control.export_reference_variable_name, channel{1});
                    export_var(EvFile, reference_variable, ...
                        Echointegration_Output_dir, name, ...
                        control.Grid_height, control.Grid_distance, control.verbosity);
                catch excpt     %#ok<NASGU>         % handle legacy variable name
                    export_var(EvFile, 'HAC Sv 38 kHz', ...
                        Echointegration_Output_dir, name, ...
                        control.Grid_height, control.Grid_distance, control.verbosity);
                end
            else % exporting values from resampled variable (fast processing) + number of samples in unfiltered cell                 
                reference_variable = sprintf(control.export_reference_variable_name_fast, channel{1})                
                export_resampled_var(EvFile, reference_variable, Echointegration_Output_dir, name, control.verbosity);
                reference_numsamples_variable = sprintf(control.export_rawnumsamples_variable_name_fast, channel{1})   ;             
                export_resampled_var(EvFile, reference_numsamples_variable, Echointegration_Output_dir, name, control.verbosity);
            end
            
            % final cleaned data
            if control.export_final & ~control.export_sv_fast % go via standard processing
                final_variable = sprintf(control.export_final_variable_name, channel{1});
                export_var(EvFile, final_variable, ...
                    Echointegration_Output_dir, name, ...
                    control.Grid_height, control.Grid_distance, control.verbosity);
            else % exporting values from resampled variable (fast processing).                 
                final_variable = sprintf(control.export_final_variable_name_fast, channel{1})                
                export_resampled_var(EvFile, final_variable, Echointegration_Output_dir, name, control.verbosity);
            end                        
            
            % proportion of data rejected
            if control.export_reject & ~control.export_sv_fast % go via standard processing
                rejectdata_variable = sprintf(control.export_rejectdata_variable_name, channel{1});
                export_var(EvFile, rejectdata_variable, ...
                    Echointegration_Output_dir, name, ...
                    control.Grid_height, control.Grid_distance, control.verbosity);
            else % exporting values from resampled variable (fast processing).                 
                rejectdata_variable = sprintf(control.export_rejectdata_variable_name_fast, channel{1})                
                export_resampled_var(EvFile, rejectdata_variable, Echointegration_Output_dir, name, control.verbosity);
            end
            
            % signal to noise value per cell
            if control.export_noise & ~control.export_sv_fast % go via standard processing
                noise_variable = sprintf(control.export_noise_variable_name, channel{1});
                export_var(EvFile, noise_variable, ...
                    Echointegration_Output_dir, name, ...
                    control.Grid_height, control.Grid_distance, control.verbosity);
            else % exporting values from resampled variable (fast processing).                 
                noise_variable = sprintf(control.export_noise_variable_name_fast, channel{1});
                export_resampled_var(EvFile, noise_variable, Echointegration_Output_dir, name, control.verbosity);
            end
                        
            % background noise per echointegration interval
            if control.export_background & ~control.export_sv_fast % go via standard processing
                background_variable = sprintf(control.export_background_variable_name, channel{1});
                export_var(EvFile, background_variable, ...
                    Echointegration_Output_dir, name, ...
                    control.Grid_height, control.Grid_distance, control.verbosity);
            else
                background_variable = sprintf(control.export_background_variable_name_fast, channel{1});
                export_resampled_var(EvFile, background_variable, Echointegration_Output_dir, name, control.verbosity);
            end
        end
        
        try
            EvFile.Close;
        catch exception
            fprintf('Stopped at %s line %d because of:\n%s\n', ...
                exception.stack(1).file, exception.stack(1).line, exception.message);
            fprintf('type "dbcont" and press Enter to continue\n');
        end
    end
end


function  export_resampled_var(EvFile, vname, dir, fname,verbosity)
% function to export from resampled variables. 
    % capture Ev filename as key piece of metadata for later use by
    % read_echointegration    
        EvFileName = EvFile.FileName;
        dlm = strfind(EvFileName,'\');
        ev_file_store = [EvFileName(dlm(end)+1:end-2) 'txt'];
        fid = fopen([dir '\' ev_file_store],'w+');
        fprintf(fid,'%s\n',EvFile.FileName);
        fclose(fid);
   % export to csv file from a resampled variable.
        Var = EvFile.Variables.FindByName(vname);
        if isempty(Var)
            fprintf('Couldnt find variable %s \n', vname);
            %keyboard
            if isempty(Var)
                fprintf('Skipping export of not found variable %s \n', vname);
                return
            end
        end
        export_file_name = fullfile(dir, [fname '_' vname '.csv']);

    % now export
        if verbosity > 1
           fprintf('exporting %s to \n%s\n', vname, export_file_name);
        end
        if Var.ExportData(export_file_name)
            if verbosity > 1
                fprintf('Done %s_%s.csv\n',fname,vname);
            end
        else
             fprintf('Echointegration failed\n');
        end        
end



function export_var(EvFile, vname, dir, fname, height, distance, verbosity)
    COLUMNS= {
%    'Interval';        % This export variable is not user accessible
%    'Layer';           % This export variable is not user accessible
    'Layer_depth_min';
    'Layer_depth_max';
    'Samples' ;         % Deprecated - old version of echoview.
    'Good_samples';
    'Lat_M';
    'Lon_M';
    'Date_M';
    'Time_M';
    'Height_mean';
    'Depth_mean';
    'EV_filename';
    'Program_version';
    'Sv_mean';
    'Standard_deviation';
    'Skewness';
    'Kurtosis';
    };

    EvFile.Properties.Export.EmptyCells = 1;
    for i = 1:size(COLUMNS,1);
        try
            EvFile.Properties.Export.Variables.Item(COLUMNS{i,1}).Enabled = 1;
        catch e
%             warning('EXPORT:COL', 'Column %s, message %s', COLUMNS{i,1}, e.message);
        end
    end

     Var = EvFile.Variables.FindByName(vname);
     if isempty(Var)
         fprintf('Couldnt find variable %s \n', vname)
         %keyboard
         if isempty(Var)
             fprintf('Skipping export of not found variable %s \n', vname)
             return
         end
     end
     VarAc = Var.AsVariableAcoustic;
     VarAc.Properties.Grid.SetDepthRangeGrid(1, height);
     VarAc.Properties.Grid.SetTimeDistanceGrid(5, distance);
     export_file_name = fullfile(dir, [fname '_' vname '.csv']);
     
     if verbosity > 1
        fprintf('exporting %s to \n%s\n', vname, export_file_name);
     end
     if VarAc.ExportIntegrationByCellsAll(export_file_name);
         if verbosity > 1
            fprintf('Done %s_%s.csv\n',fname,vname);
         end
     else
         fprintf('Echointegration failed\n');
     end

end
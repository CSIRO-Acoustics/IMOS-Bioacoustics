function GUI(defaults, mode)
% function to provide a GUI to drive the IMOS BASOOP processing.
%
% Inputs:
%   defaults -  source of default values for the options to pass to
%               process_BASOOP. These default may include values not
%               displayed by the GUI.
%               defaults can be one of the following:
%       - struct containing fields 
%       - filename of text file contain name value pairs seperated by white
%           space.
%       - filename of matlab MAT file containing fields to load (including
%           save file written by GUI and log files written by process_SOOP)
%       - empty string - the user will be asked for one the above file
%           names.
%       - the string '-' which will load the values saved in the log file
%           when this user last pressed the "Start process" button.
%       - empty non-string [] - use the hard coded defaults.
%       If no argument is provided then the '-' (last process) option
%       applies.
%    mode   - Display mode one of: 'Full', 'Echoview' or 'NetCDF'.
%       Echoview and NetCDF modes restrict the fields displayed to only
%       those relevant to that phase of the processing.
%
% GUI gets a control structure from basoop (modified by input
% defaults) and presents them to the user for modification. When the "Start
% process" button is pressed the settings are read from the interface and
% passed to process_BASOOP. 
%
% process_BASOOP has no dependancies on GUI and can be run by any method
% that passes it an appropriate control structure (process_BASOOP will call
% basoop to get default values for any fields not supplied by the
% passed structure).
%
    if nargin < 1 || strcmp(defaults, '?')
        qa = {'Defaults ([])', 'Last used (''-'')', 'Open File ('''')'};
        answr = questdlg('Start with', 'Start with', ...
            qa{1}, qa{2}, qa{3}, ...
            qa{2});
        
        defaults = '-';
        if strcmp(answr, qa{1})
            defaults = [];
        elseif strcmp(answr, qa{3})
            defaults = '';
        end
    end
    
    if nargin < 2
        mode = 'Full';
    end
    
    % if an empty string is passed asked the user for the file to load
    % defaults from
    if ischar(defaults) && isempty(defaults)
        [deffile, defpath] = uigetfile(fullfile(fileparts(mfilename('fullpath')), 'save', ''));
        defaults = fullfile(defpath, deffile);
    end    
    wpth = fileparts(mfilename('fullpath'));
    if isempty(strfind(path(),wpth))
        addpath(wpth);
    end
        
    if strcmp(defaults,'-')          
        logs = dir(fullfile(wpth,'log',['2*' getenv('USER') getenv('UserName') '.mat']));
        if isempty(logs)
            logs = dir(fullfile(wpth,'log','2*.mat'));
        end
        timestamp = [logs.datenum];
        last = timestamp == max(timestamp);
        if ~isempty(last)
            defaults = fullfile(wpth,'log',logs(last).name);
        end
    end

    settings = basoop(defaults);
        
    % remove non-GUI fields 
    % which may have added by previous use of reprocess.
    if isfield(settings, 'import_ev')
        settings = rmfield(settings, 'import_ev');
    end
            
    % find list of platforms (vessels) 
    platform_path = fullfile(wpth, 'platform');
    if ~isdir(platform_path)
        platform_path = fullfile(fileparts(which('imosToolbox')), ...
            'NetCDF', 'platform');
    end
    
    pattern = '^(.+)_attributes\.txt$';
    
    platforms = listFiles(platform_path, pattern);
    
    if isempty(platforms)
        fprintf('Could not find platforms in %s\f', platform_path);
        platforms = { '' };
    end
    
    pltfm = 1;
    for p = 1:length(platforms)
        if strcmp(settings.platform, platforms{p})
            pltfm = p;
        end
    end
    
    % Check which display mode to use
    if isempty(mode) || strcmp(mode, '?')
        mode = questdlg('Which mode would you like displayed?', 'Display mode', ...
            'Full', 'Echoview worksheets', 'NetCDF files', ...
            'Full');
    end
        
    % build GUI
    fig = figure('Name', ['BASOOP GUI - ' settings.version] , 'NumberTitle', 'off');
    screen = get(0, 'ScreenSize');
    if ispc()
        width = min(max(1100, .9*screen(3)),screen(3));
        set(fig, 'OuterPosition', [(screen(3)-width)/2 screen(4)/8 width .75*screen(4)]);
    else
        width = min(max(1100, .45*screen(3)),screen(3));
        set(fig, 'OuterPosition', [.5+(screen(3)-width)/2 screen(4)/8 width .75*screen(4)]);
    end
        
    % booleans indication mode and visiblity settings according to mode
    % All uicontrols are created in all modes but uicontrols not used in
    % the current mode have there visibility set to 'off'. The program can
    % still read values from them but the user can't interact with them.
    mode_E = false;
    mode_N = false;
    mode_F = false;
    vis_EF = 'off';     % uicontrols that will be visible in Echoview and Full modes
    vis_NF = 'off';     % uicontrols that will be visible in NetCDF and Full modes    
    if strncmpi(mode, 'Echoview', 1)    % echoview mode
        step = 0.048;                   % line height
        step_EF = step;
        step_NF = 0;
        hght = step * 0.97;             % control height
        mode_E = true;
        vis_EF = 'on';
        
        % turn of processing steps the user can't access
        settings.read_echointegration = false;
        settings.read_netcfd = false;
        settings.synTS = false;
        settings.CARS = false;
        settings.npp = false;
        settings.layer_indices = false;
        settings.sound_speed = false;
        settings.read_meta = false;
        settings.review_priority_metadata = false;
        settings.review_metadata = false;
        settings.zap = false;
        settings.matlab_view = false;
        settings.netcdf = false;
        settings.viz = false;
        settings.make_imos = false;
        settings.imos_upload = false;
        
    elseif strncmpi(mode, 'NetCDF', 1)  % NetCDF mode
        step = 0.064;                   % line height
        step_EF = 0;
        step_NF = step;
        hght = step * 0.97;             % control height
        mode_N = true;
        vis_NF = 'on';
    
        % turn of processing steps the user can't access
        settings.create_ev_files = false;
        settings.review_ev_files = false;
        settings.export_import_HAC = false;
        settings.export_sv = false;
       
    else
        step = 0.034;               % line height
        step_EF = step;
        step_NF = step;
        hght = step * 0.97;         % control height
        mode_F = true;
        vis_EF = 'on';
        vis_NF = 'on';
    end
    
    mode_EF = mode_E | mode_F;
    mode_NF = mode_N | mode_F;
    
    % Predefine positions for locating uicontrols
    base = 1;               % baseline for current control (changes by step each row)
    margin = 0.1;           % space on left and right of main area for text fields
    left = margin;          % space on left of screen for instructions
    right = 1 - margin;     % space on right of screen for status updates
    
    bwidth = 0.05;          % width of "Browse" buttons
    bpos = right - bwidth;  % horizontal position of "Browse" buttons
    prompt = 0.2;           % space for prompt before file selection fields
    ffield = left + prompt; % position of edit fields for enter file names
    bfield = bpos - ffield - 0.01;  % width of edit fields for file names
    
    main_panel = uipanel(...
        'Parent',       fig, ...
        'BorderType',   'none');
    
    % Vessel
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'popupmenu', ...
        'TooltipString', 'Select the Vessel the data was acquired on.', ...
        'Tag',          'platform', ...
        'String',       platforms, ...
        'Value',        pltfm, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.25 hght ])
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Edit the vessel metadata', ...
        'Tag',          'edit_vessel', ...
        'String',       'Edit', ...
        'User',         platform_path, ...
        'Callback',     @edit_vessel, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left + 0.25 base bwidth hght ]);

    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Add a new vessel', ...
        'Tag',          'add_vessel', ...
        'String',       'Add', ...
        'User',         platform_path, ...
        'Callback',     @add_vessel, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left + 0.3 base bwidth hght ]);
    
    % Channels
    for chan = 1:length(settings.channels);
        selected = 0;
        for s = 1:length(settings.channel) 
            if strcmp(settings.channels{chan},settings.channel{s})
                selected = 1;
            end
        end
        frq = 0;
        if length(settings.frequencies) >= chan
            frq = settings.frequencies(chan);
        end
        
        uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', ['Process data for ' settings.channels{chan} ], ...
        'Tag',          ['channel ' num2str(chan)], ...
        'String',       settings.channels{chan}, ...
        'Value',        selected, ...
        'User',         frq, ...
        'Units',        'normalized', ...
        'Position',     [0.45 + chan * 0.05 base 0.05 hght ]);
    end
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Add a new channel', ...
        'Tag',          'add_channel', ...
        'String',       'Add', ...
        'User',         settings.channels, ...
        'Callback',     @add_channel, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    % Transit start and end
    base = base - step;
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'From ', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.03 hght]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Descriptive name of locality near start of processed data (appears on plots, etc)', ...
        'Tag',          'start locality', ...
        'String',       settings.meta.transit_start_locality, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left+0.03 base 0.1 hght]); 
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       ' to ', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left+.13 base 0.02 hght]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Descriptive name of locality near end of processed data (appears on plots, etc)', ...
        'Tag',          'end locality', ...
        'String',       settings.meta.transit_end_locality, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left+0.15 base 0.1 hght]); 
    
    % DataView    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Run DataView to generate the data file list and gps file', ...
        'String',       'Launch DataView', ...
        'Tag',          'Dataview button', ...
        'User',         settings, ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.1 hght ], ...
        'Callback',     @start_Dataview);

    % DataView
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Generate the data file list and gps file in matlab', ...
        'String',       'Get transit', ...
        'Units',        'normalized', ...
        'Position',     [0.55 base 0.1 hght ], ...
        'Callback',     @start_gps);

    % Metadata
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Enter metadata to be include in the NetCDF file', ...
        'Tag',          'metadata', ...
        'String',       'Pre-enter metadata', ...
        'User',         settings.meta, ...
        'Units',        'normalized', ...
        'Visible',      vis_NF, ...
        'Position',     [0.7 base 0.1 hght ], ...
        'Callback',     @view_metadata);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'View control settings and edit settings not visible on GUI', ...
        'Tag',          'debug', ...
        'User',         '', ...
        'String',       'Debug', ...
        'User',         settings, ...
        'Callback',     @edit_settings, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    if mode_EF
    %
    create_panel = uipanel(...
        'Parent',       main_panel, ...
        'Position',     [0, base-10*step margin 10*step]);
    
    uicontrol(create_panel, ...
        'Style',        'text', ...
        'String',       'Create new EchoView worksheets', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 1]);
    end
 
    % Create EV files
    base = base - step_EF;
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Create .ev files from the template and raw data files', ...
        'Tag',          'create_ev_files', ...
        'String',       'Create a set of ev files based on the selected raw files', ...
        'Value',        settings.create_ev_files, ...
        'FontWeight',   'bold', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.5 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'create ev status', ...
        'String',       '', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Detect:', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.45 base 0.05 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', ['Include bottom line pick in .ev file based on "' ...
                            settings.base_variable_name '"'], ...
        'Tag',          'detect_seafloor', ...
        'String',       'Seafloor', ...
        'Value',        settings.detect_seafloor, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.5 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', ['Include line pick of upper deep scattering layer in .ev file based on "' ...
                            settings.resample_variable_name '"'], ...
        'Tag',          'detect_upper_DSL', ...
        'String',       'Upper deep scatter layer', ...
        'Value',        settings.detect_upper_DSL, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.6 base 0.15 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Create fixed line for editing as DSL', ...
        'Tag',          'detect_fixed', ...
        'String',       'DSL @', ...
        'Value',        settings.detect_fixed, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.75 base 0.05 hght ]);
    
     uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Depth of fixed line for deep scattering layer in m', ...
        'Tag',          'fixed layer', ...
        'String',       num2str(settings.fixed_layer), ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.8 base 0.05 hght ]);   

    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Create ev files in non-standard directory', ...
        'Tag',          'create_alt_ev_files', ...
        'String',       'Create in:', ...
        'Value',        settings.create_alt_ev_files, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left + 0.05 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of directory to put ev files', ...
        'Tag',          'alt ev dir', ...
        'String',       settings.alt_ev_dir, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the filelist file', ...
        'Tag',          'alt ev dir browse', ...
        'User',         '', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);

    % Template
    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Echoview template', ...
        'HorizontalAlignment',        'Left', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [margin + 0.05 base prompt hght ]);
        
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Filename of the echoview template to use to process this data', ...
        'Tag',          'Echoview template', ...
        'String',       settings.template, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the echoview template', ...
        'Tag',          'Echoview template browse', ...
        'User',         '*.ev', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]); 
    
    % Calibration
    base = base - step;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read metadata from an EchoView Calibrations Settings (.ecs) file', ...
        'Tag',          'read ecs', ...
        'String',       'Read calibration file', ...
        'Units',        'normalized', ...
        'Value',        settings.read_ecs, ...
        'Position',     [margin + 0.05 base prompt hght ]);
        
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Filename of the echoview calibration file', ...
        'Tag',          'calibration file', ...
        'String',       settings.calibration_file, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the echoview calibration file', ...
        'Tag',          'calibration file browse', ...
        'User',         '*.ecs', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]); 
    
    % .raw files
    % GUI only currently supports 1 additional file set, process_BASOOP
    % supports any number
    datafiles = settings.transit_data_files;
    addfiles = '';
    if iscell(datafiles)
        datafiles = settings.transit_data_files{1};
        if length(settings.transit_data_files) > 1
            addfiles = settings.transit_data_files{2};
        end
    end

    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Raw data file list', ...
        'HorizontalAlignment',        'Left', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [margin + 0.05 base prompt hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', ['Name of the file containing the list of .raw files to process in fileset ' settings.filesets{1}], ...
        'Tag',          'transit data files', ...
        'String',       datafiles, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'FontWeight',   'bold', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the transit data file list', ...
        'Tag',          'transit data files browse', ...
        'User',         '*.txt', ...
        'String',       'Browse', ...
        'Callback',     @browse_raw, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    % 12 kHz .raw files
    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       '   12 kHz Raw data file list', ...
        'HorizontalAlignment',        'Left', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [margin + 0.05 base prompt hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', ['Name of the file containing the list of .raw files to process in fileset ' settings.filesets{2}], ...
        'Tag',          '12 kHz data files', ...
        'String',       addfiles, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the transit data file list', ...
        'Tag',          '12 kHz data files browse', ...
        'User',         '*.txt', ...
        'String',       'Browse', ...
        'Callback',     @browse_raw, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
       
    % .gps.csv files
    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Raw data gps.csv file', ...
        'HorizontalAlignment',        'Left', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [margin + 0.05 base prompt hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the .gps.csv file containing navigation for the whole transit', ...
        'Tag',          'transit gps file', ...
        'String',       settings.transit_gps_file, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the gps.csv file', ...
        'Tag',          'transit gps file browse', ...
        'User',         '*.gps.csv', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    % .roll.csv files
    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Include roll file in worksheet', ...
        'Tag',          'include_roll', ...
        'String',       'roll.csv file', ...
        'Value',        settings.include_roll, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left + 0.05 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the .roll.csv file containing motion data for the whole transit', ...
        'Tag',          'transit roll file', ...
        'String',       settings.transit_roll_file, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the roll.csv file', ...
        'Tag',          'transit roll file browse', ...
        'User',         '*.roll.csv', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);

    % .pitch.csv files
    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Include pitch file in worksheet', ...
        'Tag',          'include_pitch', ...
        'String',       'pitch.csv file', ...
        'Value',        settings.include_pitch, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left + 0.05 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the .pitch.csv file containing motion data for the whole transit', ...
        'Tag',          'transit pitch file', ...
        'String',       settings.transit_pitch_file, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the pitch.csv file', ...
        'Tag',          'transit pitch file browse', ...
        'User',         '*.pitch.csv', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);

    % time block
    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Span of EV files in hours:', ...
        'HorizontalAlignment',        'Left', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [margin + 0.05 base prompt hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Number of hours of data to process per .ev file', ...
        'Tag',          'time block', ...
        'String',       num2str(settings.time_block), ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Time PC clock is behind UTC: ', ...
        'HorizontalAlignment',        'Right', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.5 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Time offset of logged data from UTC', ...
        'Tag',          'time offset', ...
        'String',       num2str(settings.time_offset / 60), ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.5 + 0.1 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'popupmenu', ...
        'TooltipString', 'Time offset units', ...
        'Tag',          'time offset units', ...
        'String',       {'hours', 'minutes', 'seconds'}, ...
        'Value',        2, ...
        'User',         2, ...
        'HorizontalAlignment', 'left', ...
        'Callback',     @changeTimeOffsetUnits, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.7 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Check the time_offset data in the .gps.csv file', ...
        'Tag',          'Check time offset', ...
        'String',       'Check', ...
        'FontWeight',   'bold', ...
        'Callback',     @checkTimeOffset, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'check status', ...
        'String',       '', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    if mode_EF
    %
    review_panel = uipanel(...
        'Parent',       main_panel, ...
        'Position',     [0, base-2*step margin 2* step]);
    
    uicontrol(review_panel, ...
        'Style',        'text', ...
        'String',       'Use EchoView to interact with worksheets', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 1]);
    end
    
    % Alternate EV file location
    base = base - step_EF;
%     uicontrol(main_panel, ...
%         'Style',        'checkbox', ...
%         'TooltipString', 'If not creating ev files, use the specified ev file list (otherwise use list determined by file names)', ...
%         'Tag',          'use_alt_ev_files', ...
%         'String',       'Use ev files from:', ...
%         'Value',        settings.use_alt_ev_files, ...
%         'Visible',      vis_EF, ...
%         'Units',        'normalized', ...
%         'Position',     [left base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Use ev files from:', ...
        'Units',        'normalized', ...
        'Visible',      vis_EF, ...
        'HorizontalAlignment', 'left', ...
        'Position',     [left base 0.2 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the file containing list of echoview worksheets', ...
        'Tag',          'alt ev files', ...
        'String',       settings.alt_ev_files, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'FontWeight',   'bold', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the filelist file', ...
        'Tag',          'alt ev files browse', ...
        'User',         '*.txt', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    % Review worksheets
    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Review the .ev files in echoview and optionally select which files to process', ...
        'Tag',          'review_ev_files', ...
        'String',       'Review the ev worksheets', ...
        'Value',        settings.review_ev_files, ...
        'FontWeight',   'bold', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.8 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'review ev status', ...
        'String',       '', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    if mode_EF
    %
    ev_panel = uipanel(...
        'Parent',       main_panel, ...
        'Position',     [0, base-3*step margin 3*step]);
    
    uicontrol(ev_panel, ...
        'Style',        'text', ...
        'String',       'Process worksheets', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 1]);
    end
    
    % Export HAC
    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Export .ev files to HAC format and re-import', ...
        'Tag',          'export_import_HAC', ...
        'String',       'Export all worksheets to HAC files and re-import worksheets', ...
        'Value',        settings.export_import_HAC, ...
        'FontWeight',   'bold', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.3 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Export HAC variables', ...
        'Tag',          'export_HAC', ...
        'String',       'Export', ...
        'Value',        settings.export_HAC, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Import HAC variables', ...
        'Tag',          'import_HAC', ...
        'String',       'Import', ...
        'Value',        settings.import_HAC, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.5 base 0.1 hght ]);
    
    for hac = 1:5
        HAC = ['HAC' num2str(hac)];
        uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', ['Process variable ' HAC], ...
        'Tag',          HAC, ...
        'String',       HAC, ...
        'Value',        any(hac == settings.HAC), ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.6+(hac-1)*0.05 base 0.05 hght ]);    
   end
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'export HAC status', ...
        'String',       '', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % Export .csv
    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Export Sv to .csv files', ...
        'Tag',          'export_sv', ...
        'String',       'Export to echointegration results', ...
        'Value',        settings.export_sv, ...
        'FontWeight',   'bold', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.8 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Export Resampled Sv values for much faster processing', ...
        'Tag',          'export_sv_fast', ...
        'String',       'Fast processing', ...            
        'Value',        settings.export_sv_fast, ...        
        'FontWeight',   'bold', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left+.15 base 0.8 hght ]); 
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'export csv status', ...
        'String',       '', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    base = base - step_EF;
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Export:', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [left+0.01 base-0.007 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', [ 'Export reference (uncleaned) data - ' ...
                            settings.export_reference_variable_name ], ...
        'Tag',          'export_reference', ...
        'String',       'Reference', ...
        'Value',        settings.export_reference, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.2 base 0.1 hght ]);   
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', [ 'Export cleaned data - ' ...
                            settings.export_final_variable_name ], ...
        'Tag',          'export_final', ...
        'String',       'Cleaned', ...
        'Value',        settings.export_final, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.3 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', [ 'Exported rejected data - ' ...
                            settings.export_rejectdata_variable_name ], ...
        'Tag',          'export_reject', ...
        'String',       'Rejected', ...
        'Value',        settings.export_reject, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', [ 'Exported signal to noise - ' ...
                            settings.export_noise_variable_name ], ...
        'Tag',          'export_noise', ...
        'String',       'Noise', ...
        'Value',        settings.export_noise, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.5 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', [ 'Exported background level - ' ...
                            settings.export_background_variable_name ], ...
        'Tag',          'export_background', ...
        'String',       'Background', ...
        'Value',        settings.export_background, ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.6 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'Grid height: ', ...
        'TooltipString', 'value of Grid_height used in echointegration grid', ...
        'HorizontalAlignment', 'Right', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.7 base 0.05 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       'distance: ' , ...
        'TooltipString', 'value of Grid_distance used in echointegration grid', ...
        'HorizontalAlignment', 'Right', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.8 base 0.05 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Integration grid height in m [10]', ...
        'Tag',          'grid height', ...
        'String',       num2str(settings.Grid_height), ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.75 base 0.05 hght ]);

    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Integration interval distance in m [1000]', ...
        'Tag',          'grid distance', ...
        'String',       num2str(settings.Grid_distance), ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_EF, ...
        'Units',        'normalized', ...
        'Position',     [0.85 base 0.05 hght ]);

    if mode_NF
    %
    netcdf_panel = uipanel(...
        'Parent',       main_panel, ...
        'Position',     [0, base-9*step margin 9*step]);
    
    uicontrol(netcdf_panel, ...
        'Style',        'text', ...
        'String',       'Create a NetCDF file from either echointegration data or an existing NetCDF file', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 1]);
    end
    
    % read echointegration
    base = base - step_NF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read data from the echointegraion .csv files', ...
        'Tag',          'read echointegration', ...
        'String',       'Read echointegration', ...
        'Value',        settings.read_echointegration, ...
        'FontWeight',   'bold', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.15 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Directory containing echointegration .csv files', ...
        'Tag',          'echointegration path', ...
        'String',       settings.echointegration_path, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the echointegration directory', ...
        'Tag',          'echointegration path browse', ...
        'User',         '', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'read echointegration status', ...
        'String',       '', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);

    base = base - step_NF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Generate an multi-channel format (even if only one channel) Netcdf', ...
        'Tag',          'single format', ...
        'String',       'Multi-channel format', ...
        'Value',        ~settings.single_format, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.25 base 0.15 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Generate an extended format NetCDF file for internal use (sd, skewness, kurtosis, etc)', ...
        'Tag',          'extended netcdf', ...
        'String',       'Extended', ...
        'Value',        settings.extended, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.1 hght ]);

% % % %     uicontrol(main_panel, ...
% % % %         'Style',        'text', ...
% % % %         'String',       ['Maximum depth: ' num2str(settings.max_depth)], ...
% % % %         'TooltipString', 'Value of max_depth, maximum depth to read from echointegration csvs', ...
% % % %         'HorizontalAlignment', 'Left', ...
% % % %         'Visible',      vis_NF, ...
% % % %         'Units',        'normalized', ...
% % % %         'Position',     [0.5 base 0.1 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       ['Maximum depth (m):'], ...
        'TooltipString', 'Value of max_depth, maximum depth to read from echointegration csvs', ...
        'HorizontalAlignment', 'Left', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.5 base*0.975 0.1 hght ]);
    
      uicontrol(main_panel, ...
        'Style',        'edit', ...
        'String',       [num2str(settings.max_depth)], ...
        'TooltipString', 'Value of max_depth, maximum depth to read from echointegration csvs', ...
        'HorizontalAlignment', 'Left', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.56 base 0.03 hght*.9 ]);
    
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       ['Minimum % good: ' num2str(settings.min_good)], ...
        'TooltipString', 'Value of min_good, minimum percent good to read from echointegration csvs', ...
        'HorizontalAlignment', 'Left', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.63 base*0.975 0.1 hght ]);
  
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'String',       ['Flag % good: ' num2str(settings.accept_good)], ...
        'TooltipString', 'Value of accept_good, minimum percent good to flag as good data', ...
        'HorizontalAlignment', 'Left', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.76 base*0.975 0.1 hght ]);
  
%     % Merge
%     base = base - step;
%     uicontrol(main_panel, ...
%         'Style',        'checkbox', ...
%         'TooltipString', 'Merge exported .csv files into a format suitable for IMOS toolbox parser', ...
%         'Tag',          'merge', ...
%         'String',       'Merge CSV files to:', ...
%         'Value',        settings.merge, ...
%         'FontWeight',   'bold', ...
%         'Units',        'normalized', ...
%         'Position',     [left base 0.2 hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'edit', ...
%         'TooltipString', 'Name of the file to hold the merged .csv', ...
%         'Tag',          'merge file', ...
%         'String',       settings.merge_file, ...
%         'HorizontalAlignment', 'left', ...
%         'Units',        'normalized', ...
%         'Position',     [ffield base bfield hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'pushbutton', ...
%         'TooltipString', 'Select the merge file', ...
%         'Tag',          'merge file browse', ...
%         'User',         '+*.csv', ...
%         'String',       'Browse', ...
%         'Callback',     @browse, ...
%         'Units',        'normalized', ...
%         'Position',     [bpos base bwidth hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'text', ...
%         'Tag',          'merge status', ...
%         'String',       '', ...
%         'Units',        'normalized', ...
%         'Position',     [right base margin hght ]);
%     
%     % Parse merge
%     base = base - step;
%     uicontrol(main_panel, ...
%         'Style',        'checkbox', ...
%         'TooltipString', 'Read data from the merge file', ...
%         'Tag',          'read merge', ...
%         'String',       'Read merge file', ...
%         'Value',        settings.read_merge, ...
%         'FontWeight',   'bold', ...
%         'Units',        'normalized', ...
%         'Position',     [left base 0.1 hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'checkbox', ...
%         'TooltipString', 'Generate an extended format NetCDF file for internal use', ...
%         'Tag',          'extended netcdf', ...
%         'String',       'Extended', ...
%         'Value',        settings.extended, ...
%         'Units',        'normalized', ...
%         'Position',     [0.2 base 0.1 hght ]);
% 
%     uicontrol(main_panel, ...
%         'Style',        'edit', ...
%         'TooltipString', 'Name of the merged .csv, leave blank to use merge file above', ...
%         'Tag',          'parse file', ...
%         'String',       settings.parse_file, ...
%         'HorizontalAlignment', 'left', ...
%         'Units',        'normalized', ...
%         'Position',     [ffield base bfield hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'pushbutton', ...
%         'TooltipString', 'Select the merge file to parse', ...
%         'Tag',          'parse file browse', ...
%         'User',         '*.csv', ...
%         'String',       'Browse', ...
%         'Callback',     @browse, ...
%         'Units',        'normalized', ...
%         'Position',     [bpos base bwidth hght ]);
%     
%     uicontrol(main_panel, ...
%         'Style',        'text', ...
%         'Tag',          'read merge status', ...
%         'String',       '', ...
%         'Units',        'normalized', ...
%         'Position',     [right base margin hght ]);
    
    % Import netCDF
    base = base - step_NF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read data from an existing NetCDF file instead of the above processes', ...
        'Tag',          'read netcdf', ...
        'String',       'Read NetCDF file', ...
        'Value',        settings.read_netcdf, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left base prompt hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the NetCDF file to read', ...
        'Tag',          'netcdf file', ...
        'String',       settings.netcdf_file, ...
        'User',         {}, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the NetCDF file', ...
        'Tag',          'netcdf file browse', ...
        'User',         {'*.nc','NetCDF files (*.nc)'; '*.mat', 'MAT files (*.mat)'}, ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'read netcdf status', ...
        'String',       '', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % synTS
    base = base - step_NF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read synetic Temperature and Salinity data for the transect', ...
        'Tag',          'synTS', ...
        'String',       'Read synTS', ...
        'Value',        settings.synTS, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read CARS oceanography', ...
        'Tag',          'CARS', ...
        'String',       'Read CARS', ...
        'Value',        settings.CARS, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.3 base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read Net Primary Production', ...
        'Tag',          'npp', ...
        'String',       'Read npp', ...
        'Value',        settings.npp, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.5 base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Generate epipelagic and mesopelagic summary indices', ...
        'Tag',          'layer_indices', ...
        'String',       'Summary indices', ...
        'Value',        settings.layer_indices, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.7 base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'synTS status', ...
        'String',       '', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % Sound speed
    base = base - step_NF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Correct data for speed and absorption of sound from synTS data', ...
        'Tag',          'sound_speed', ...
        'String',       'Correct for sound speed and absorption', ...
        'Value',        settings.sound_speed, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.3 hght ]);

    speed_panel = uibuttongroup(main_panel, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.4 base 0.3 hght ]);
        
    uicontrol(speed_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Use Coppens [1981] sound speed formula', ...
        'Tag',          'speed_coppens', ...
        'String',       'Coppens', ...
        'Value',        strcmp (settings.soundspeed_formula, 'Coppens'), ...
        'Units',        'normalized', ...
        'Position',     [0 0 1/3 1 ]);

    uicontrol(speed_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Use Mackenzie [1981] sound speed formula', ...
        'Tag',          'speed_mackenzie', ...
        'String',       'Mackenzie', ...
        'Value',        strcmp (settings.soundspeed_formula, 'Mackenzie'), ...
        'Units',        'normalized', ...
        'Position',     [1/3 0 1/3 1 ]);

    uicontrol(speed_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Use Gibbs SeaWater Oceanographic Toolbox - TEOS-10 sound speed formula', ...
        'Tag',          'speed_gsw', ...
        'String',       'GSW TEOS-10', ...
        'Value',        strcmp (settings.soundspeed_formula, 'GSW'), ...
        'Units',        'normalized', ...
        'Position',     [2/3 0 1/3 1 ]);


    absorption_panel = uibuttongroup(main_panel, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.7 base 0.2 hght ]);
        
    uicontrol(absorption_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Use Francois and Garrison [1982] sound absorption formula', ...
        'Tag',          'absorption_francois', ...
        'String',       'Francois', ...
        'Value',        strcmp (settings.soundabsorption_formula, 'Francois'), ...
        'Units',        'normalized', ...
        'Position',     [0 0 0.5 1 ]);

    uicontrol(absorption_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Use Doonan sound absorption formula', ...
        'Tag',          'absorption_doonan', ...
        'String',       'Doonan', ...
        'Value',        strcmp (settings.soundabsorption_formula, 'Doonan'), ...
        'Units',        'normalized', ...
        'Position',     [0.5 0 0.5 1 ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'sound speed status', ...
        'String',       '', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % Voyage information
    base = base - step_NF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read metadata from voyage information (.inf) file', ...
        'Tag',          'read inf', ...
        'String',       'Read voyage file', ...
        'Units',        'normalized', ...
        'Visible',      vis_NF, ...
        'Value',        settings.read_inf, ...
        'Position',     [left base prompt hght ]);
        
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Filename of the voyage .inf file', ...
        'Tag',          'inf file', ...
        'String',       settings.voyage_inf, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the voyage information file', ...
        'Tag',          'inf file browse', ...
        'User',         '*.inf', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]); 
    
    % Extra metadata    
    base = base - step_NF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Read additional metadata from the file', ...
        'Tag',          'read metadata', ...
        'String',       'Extra metadata:', ...
        'Value',        settings.read_meta, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Name of the metadata file', ...
        'Tag',          'metadata file', ...
        'String',       settings.metadata_file, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the metadata file', ...
        'Tag',          'metadata file browse', ...
        'User',         '*.txt', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'review metadata status', ...
        'String',       '', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);

    % Review metadata
    base = base - step_NF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Review and edit the priority metadata to be included in the NetCDF file', ...
        'Tag',          'review priority metadata', ...
        'String',       'Review metadata', ...
        'Value',        settings.review_priority_metadata, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.4 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Review and edit the metadata to be included in the NetCDF file', ...
        'Tag',          'review metadata', ...
        'String',       'All metadata', ...
        'Value',        settings.review_metadata, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left + prompt base 0.4 hght ]);
    
    % matlab_view
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Flag areas of bad data in matlab', ...
        'Tag',          'zap', ...
        'String',       'Manual data cleaning', ...
        'Value',        settings.zap, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left + 2 * prompt base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Drop into matlab to view sample_data - type "return" to continue', ...
        'Tag',          'matlab_view', ...
        'String',       'Review sample_data in matlab', ...
        'Value',        settings.matlab_view, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left + 3 * prompt base 0.2 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'matlab_view status', ...
        'String',       '', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % NetCDF
    base = base - step_NF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Generate a IMOS compliant NetCDF file', ...
        'Tag',          'netcdf', ...
        'String',       'Export NetCDF file', ...
        'Value',        settings.netcdf, ...
        'FontWeight',   'bold', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.2 hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Put the netcdf file in directory to the right ', ...
        'Tag',          'alt netcdf', ...
        'String',       'to: ', ...
        'Value',        settings.alt_netcdf, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [ffield - 0.05 base 0.2 hght ]);    
    
    uicontrol(main_panel, ...
        'Style',        'edit', ...
        'TooltipString', 'Directory to put NetCDF file, leave blank for transit processed data directory or input netcdf directory', ...
        'Tag',          'netcdf directory', ...
        'String',       settings.netcdf_directory, ...
        'HorizontalAlignment', 'left', ...
        'BackgroundColor','white', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base bfield hght ]);
    
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select the merge file', ...
        'Tag',          'netcdf directory browse', ...
        'User',         '', ...
        'String',       'Browse', ...
        'Callback',     @browse, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [bpos base bwidth hght ]);    
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'export NetCDF status', ...
        'String',       '', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
       
    if mode_NF
    %
    viz_panel = uipanel(...
        'Parent',       main_panel, ...
        'Position',     [0, base-1*step margin 1*step]);
    
    uicontrol(viz_panel, ...
        'Style',        'text', ...
        'String',       'viz_sv(ncfile,'''')', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 1]);
    end
    
    % Viz
    base = base - step_NF;
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Visualise the netcdf file', ...
        'Tag',          'viz', ...
        'String',       'Visualise NetCDF file', ...
        'Value',        settings.viz, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [left base 0.8 hght ]);
    
    raw_panel = uibuttongroup(main_panel, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [ffield base 0.5 hght ]);
    
    uicontrol(raw_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', 'Generate a NetCDF file from the merge file', ...
        'Tag',          'make_imos', ...
        'String',       'Generate IMOS upload zip file', ...
        'Value',        settings.make_imos, ...
        'FontWeight',   'bold', ...
        'Units',        'normalized', ...
        'Position',     [0 0 0.4 1 ]);

        
    uicontrol(raw_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Open EV files in echoview to locate raw files to package', ...
        'Tag',          'raw echoview', ...
        'String',       'Raw from ev files', ...
        'Value',        settings.raw_echoview, ...
        'Units',        'normalized', ...
        'Position',     [0.4 0 0.2 1 ]);
    
    uicontrol(raw_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Package raw files listed in the "Raw data file list" above', ...
        'Tag',          'raw datalist', ...
        'String',       'Raw from datalist', ...
        'Value',        settings.raw_datalist, ...
        'Units',        'normalized', ...
        'Position',     [0.6 0 0.2 1 ]);
    
    uicontrol(raw_panel, ...
        'Style',        'radiobutton', ...
        'TooltipString', 'Do not include .raw files in IMOS zip file', ...
        'Tag',          'raw none', ...
        'String',       'No raw files', ...
        'Value',        settings.raw_none, ...
        'Units',        'normalized', ...
        'Position',     [0.8 0 0.2 1 ]);
    
    uicontrol(main_panel, ...
        'Style',        'checkbox', ...
        'TooltipString', ['Upload zip file to ' settings.upload_site], ...
        'Tag',          'imos_upload', ...
        'String',       'Upload zip file', ...
        'Value',        settings.imos_upload, ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [0.8 base 0.1 hght ]);

    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'visualise NetCDF status', ...
        'String',       '', ...
        'Visible',      vis_NF, ...
        'Units',        'normalized', ...
        'Position',     [right base margin hght ]);
    
    % controls positioned relative to bottom.
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Run process_BASOOP with the above settings', ...
        'String',       'Start process', ...
        'Tag',          'Start button', ...
        'User',         settings, ...
        'Units',        'normalized', ...
        'Position',     [0.1 step 0.1 hght ], ...
        'Callback',     @start_process);
        
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Select multiple EV file lists to echointegrate overnight', ...
        'String',       'Echointegrate', ...
        'Tag',          'echointegrate', ...
        'User',         settings, ...
        'Units',        'normalized', ...
        'Visible',      vis_EF, ...
        'Position',     [0.25 step 0.1 hght ], ...
        'Callback',     @echointegrate);

    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Reprocess a selection of NetCDF files using these settings', ...
        'String',       'Reprocess', ...
        'Tag',          'Reprocess button', ...
        'User',         settings, ...
        'Units',        'normalized', ...
        'Position',     [0.4 step 0.1 hght ], ...
        'Callback',     @start_reprocess);
        
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Save the above settings to a file', ...
        'String',       'Save', ...
        'Tag',          'Save button', ...
        'User',         settings, ...
        'Units',        'normalized', ...
        'Position',     [0.65 step 0.1 hght ], ...
        'Callback',     @save_settings);
        
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Close this GUI', ...
        'String',       'Quit', ...
        'User',         settings, ...
        'Units',        'normalized', ...
        'Position',     [0.8 step 0.1 hght ], ...
        'Callback',     @quit);
        
    uicontrol(main_panel, ...
        'Style',        'pushbutton', ...
        'TooltipString', 'Access help file', ...
        'String',       'Help', ...
        'User',         settings, ...
        'Units',        'normalized', ...
        'Position',     [0.54 step 0.06 hght], ...
        'Callback',     @help);
    
    uicontrol(main_panel, ...
        'Style',        'text', ...
        'Tag',          'status', ...
        'String',       '', ...
        'Units',        'normalized', ...
        'Position',     [0 0 1 hght ]);
    
    function hits = listFiles(path, pattern)
        %LISTFILES Returns a cell array containing the names of all files
        %in the given directory which match the given (regex) pattern. 
        % Copied from IMOS-toolbox/Util
        
        narginchk(2,2);
        
        if ~ischar(path),    error('path must be a string');    end
        if ~ischar(pattern), error('pattern must be a string'); end
        
        hits = {};
        
        % get the contents of the directory
        files = dir(path);
        
        %iterate through each element in the directory
        for file = files'
            
            %skip subdirectories
            if file.isdir == 1, continue; end
            
            %if name matches the pattern, add
            %it to the list of hits
            token = regexp(file.name, pattern, 'tokens');
            
            %add the name name to the list
            if ~isempty(token), hits{end + 1} = token{1}{1}; end            %#ok<AGROW>
            
        end
        
        % sort alphabetical, case insensitive
        [~, idx] = sort(lower(hits));
        hits     = hits(idx);

    end

    function browse(button, ~)
        % Browse button callback.
        % Assumes there is an edit control with a Tag that matches
        % this button's Tag less the ' browse' suffix.
        %
        % This objects User data is the file filter, 
        % If User is an empty string it gets a directory instead of a file.
        % If User starts with a '+' uiputfile is called 
        
        tag = get(button, 'Tag');
        if strcmp(tag(end - 6 : end), ' browse')
            tag = tag(1 : end - 7);
        else
            tag = 'unknown';
        end
        
        parent = get(button, 'Parent');
        field = get_control(parent, tag);       
        if isempty(field)
            error('Can''t find field to browse');
        end
        
        user = get(button, 'User');
        if isempty(user) && ischar(user)
            bpath = uigetdir(get(field, 'String'),['Select ' tag]);
            if bpath ~= 0
                set(field, 'String', bpath);
            end
        else
            if isempty(user)
                user='*';
            end
            
            if ischar(user) && user(1) == '+'
                [filename, bpath] = uiputfile(user(2:end), ['Select ' tag], get(field, 'String'));
            else
                [filename, bpath] = uigetfile(user, ['Select ' tag], get(field, 'String'));
            end
            if filename ~= 0
                set(field, 'String', fullfile(bpath,filename));
            end
        end
    end

    function browse_raw(button, ~)
        % Browse button callback for raw file list.
        % Also updates the gps file based on the selection.
        browse(button)
        parent = get(button, 'Parent');
        data = get_control(parent, 'transit data files');
        gps = get_control(parent, 'transit gps file');
        [pathname, ~, ~ ] = fileparts(get(data, 'String'));
        [~, filename, ext] = fileparts(get(gps, 'String'));
        set(gps, 'String', fullfile(pathname, [filename ext]));
    end

    function [offset, head] = getOffsets(transit_gps_file)
        fid = fopen(transit_gps_file, 'r');
        if fid < 0
            warndlg(['Couldn''t find file: ' transit_gps_file ]);
            set(get_control(parent,'check status'),'String', '');
            return
        end
        header = fgetl(fid);
        head = sscanf(header,'%*[^,],%*[^,],%*[^,],%*[^,],%*[^,],%s');
        offset = textscan(fid, '%*s%*s%*s%*s%*s%f%*[^\n]', ...
            'delimiter', ',');
        if ~feof(fid)
            warning('GUI:GPS','Unable to fully scan for UTC offset in %s', transit_gps_file)
        end
        fclose(fid);
        
        offset= - offset{1};
        offset=offset(~isnan(offset));
    end

    function checkTimeOffset(button, ~)
        % function to check the .gps.csv file for UTC offset.
        % A histogram of the offset values are shown to the user and
        % the median offset value is placed in the time offset field.
        % Offsets of less than 5 minutes are treated as 0.
        
        parent = get(button, 'Parent');
        
        set(get_control(parent,'check status'),'String', datestr(now, 'HH:MM:SS'));
        drawnow;
        
        transit_gps_file = ...
            get(get_control(parent, 'transit gps file'), 'String');
        [offset, head] = getOffsets(transit_gps_file);
        if isempty(offset)
            warndlg(['No UTC offset found in file: ' transit_gps_file]);
            set(get_control(parent,'check status'),'String', '');
            return
        end
        
        tof = figure;
        ll = axes('Units', 'normalized', 'OuterPosition', [0.5 0 0.5 0.5]);
        plot(ll, offset);
        title({transit_gps_file, head}, 'Interpreter', 'none')
        ylabel('Seconds');
        
        lr = axes('Units', 'normalized', 'OuterPosition', [0 0 0.5 0.5]);
        bins=min(max(offset) - min(offset) + 1, 100);
        hist(lr, offset,bins);
        title({transit_gps_file, [head ' histogram']}, 'Interpreter', 'none')
        xlabel('Seconds');
        ylabel('Count');
        
        tof_panel = uipanel(...
            'Parent',       tof, ...
            'BorderType',   'none', ...
            'Position',     [0 0.5 1 0.5]);
        
        uicontrol(tof_panel, ...
            'Style',        'text', ...
            'String',       'Select the time offset from UTC that best matches the data', ...
            'Units',        'normalized', ...
            'Position',     [0 0.5 1 0.2]);

        off = median(offset);
        if abs(off) < 300
            off = 0;
        end
        time_offset = get_control(parent, 'time offset');
        time_unit = get_control(parent, 'time offset units');
        tunit = get(time_unit, 'Value');
        units = 60 ^ (3 - tunit);
        
        uicontrol(tof_panel, ...
            'Style',        'edit', ...
            'TooltipString', 'Time offset of logged data from UTC', ...
            'Tag',          'time offset', ...
            'String',       num2str(off / units), ...
            'HorizontalAlignment', 'left', ...
            'BackgroundColor','white', ...
            'Units',        'normalized', ...
            'Position',     [ 0.1 0.3 0.2 0.1 ]);
        
        uicontrol(tof_panel, ...
            'Style',        'popupmenu', ...
            'TooltipString', 'Time offset units', ...
            'Tag',          'time offset units', ...
            'String',       {'hours', 'minutes', 'seconds'}, ...
            'Value',        tunit, ...
            'User',         2, ...
            'HorizontalAlignment', 'left', ...
            'Callback',     @changeTimeOffsetUnits, ...
            'Units',        'normalized', ...
            'Position',     [ 0.4 0.3 0.2 0.1 ]);
        
        uicontrol(tof_panel, ...
            'Style',        'pushbutton', ...
            'TooltipString', 'Choose the time_offset selected', ...
            'Tag',          'Check time offset', ...
            'String',       'Close', ...
            'User',         time_offset, ...
            'Callback',     @returnTimeOffset, ...
            'Units',        'normalized', ...
            'Position',     [ 0.7 0.3 0.1 0.1 ]);

        waitfor(tof);
        set(get_control(parent,'check status'),'String', '');

    end

    function changeTimeOffsetUnits(button, ~)
        new = get(button, 'Value');
        old = get(button, 'User');
        set(button, 'User', new);
        scale = 60 ^ (new - old);
        parent = get(button, 'Parent');
        time_offset = get_control(parent, 'time offset');
        off = str2num(get(time_offset, 'String')); %#ok<ST2NM>
        set(time_offset, 'String', num2str(off * scale)); 
    end

    function returnTimeOffset(button, ~)
        parent = get(button, 'Parent');
        time_offset = get_control(parent, 'time offset');
        time_unit = get_control(parent, 'time offset units');
        tunit = get(time_unit, 'Value');
        main_time_offset = get(button, 'User');
        main_time_unit = get_control(get(main_time_offset, 'Parent'), 'time offset units'); 
        set(main_time_unit, 'Value', tunit);
        set(main_time_unit, 'User', tunit);
        set(main_time_offset, 'String', get(time_offset, 'String'));
        tof = get(parent, 'Parent');
        close(tof);
    end

    function start_Dataview(button, ~)
        % function to kick off Dataview
        % presumes that your Z drive is mapped to acoustics on titanic\groups
        setting = get(button, 'User');
        
        wd = cd(setting.dataview_dir);
        try                        
            system(setting.dataview_cmd);
        catch e
            fprintf('Probably can''t find dataview. \n%s\n', e.message);
            fprintf('Check that acoustics on titanic\groups is mapped to your Z drive\n');
        end
        cd(wd);
    end

    function start_gps(button, ~)
        % Callback to get file list and .gps.csv
        parent = get(button, 'Parent');
        data = get_control(parent, 'transit data files');
        listFile = fileparts(get(data,'String'));        
        keyboard
        [listFile,~,gpsFile,pitchFile,rollFile,~] = getGPS(listFile,listFile,'noinf','existing');
        set(data,'String',listFile);
        gps = get_control(parent, 'transit gps file');
        set(gps,'String',gpsFile);
        if ~isempty(pitchFile)
            pitch = get_control(parent, 'transit pitch file');
            set(pitch, 'String', pitchFile);
            roll = get_control(parent, 'transit roll file');
            set(roll, 'String', rollFile);
        end
    end

    function view_metadata(button, ~)
        % Callback to launch metadata review UI.
        parent = get(button, 'Parent');
        metadata = get(button, 'User');
        start_loc = get_control(parent, 'start locality');
        end_loc  = get_control(parent, 'end locality');
        metadata.transit_start_locality = get(start_loc, 'String');
        metadata.transit_end_locality = get(end_loc, 'String');
        metadata = review_metadata(metadata);
        set(start_loc, 'String', metadata.transit_start_locality)
        set(end_loc, 'String', metadata.transit_end_locality)
        set(button, 'User', metadata);
    end

    function edit_settings(button, ~)
        % Callback to edit settings directly
        % modify setting structure to look like a sample_data
        columns = {};
        setting = read_settings(button);
        fields = fieldnames(setting);
        for i = 1:length(fields)
            field = fields{i};
            if ~ischar(setting.(field)) && ~isempty(setting.(field)) && ...
                    (iscell(setting.(field)) || isstruct(setting.(field)) || ...
                    isa(setting.(field), 'function_handle') || ...
                    ~isvector(setting.(field)))
                bypass.(field) = setting.(field);
                setting = rmfield(setting, field);
            elseif ~isrow(setting.(field)) && ~isempty(setting.(field))
                columns{end+1} = field; %#ok<AGROW>
                setting.(field) = setting.(field)';
            end
        end
        
        setting.variables=[];
        setting.dimensions=[];
        setting.meta = [];
        
        if isfield(setting, 'error')    % Error report was loaded
            setting = rmfield(setting, 'error');
        end
        % allow user to edit
        setting = review_metadata(setting);
        
        % convert to numeric where possible
        fields = fieldnames(setting);
        for i = 1:length(fields)
            field = fields{i};
            if ischar(setting.(field)) && ~isempty(setting.(field))
                numval = str2num(setting.(field)); %#ok<ST2NM>
                if ~isempty(numval)
                    setting.(field) = numval;
                end
            end
        end
        
        % restore non editable fields
        fields = fieldnames(bypass);
        for i = 1:length(fields)
        	field = fields{i};
            setting.(field) = bypass.(field);
        end
        for i = 1:length(columns)
            setting.(columns{i}) = setting.(columns{i})';
        end
       
        % store editted setting
        set(button, 'User', setting);
        parent = get(button, 'Parent');
        dataview = get_control(parent, 'Dataview button');
        save = get_control(parent, 'Save button');
        start = get_control(parent, 'Start button');
        echo = get_control(parent, 'echointegrate');
        redo = get_control(parent, 'Reprocess button');
        set(dataview, 'User', setting);
        set(save, 'User', setting);
        set(start, 'User', setting);
        set(echo, 'User', setting);
        set(redo, 'User', setting);
    end

    function edit_vessel(button, ~)
        % Callback to add a new vessel to the system.
        platformpath = get(button, 'User');
        parent = get(button, 'Parent');
        platform_ui = get_control(parent, 'platform');
        platfrms = get(platform_ui, 'String');
        platform = platfrms{get(platform_ui, 'Value')};
        
        imos_dir = fileparts(fileparts(which('parseNetCDFTemplate')));
        if isempty(imos_dir)
            dir0 = [];
        else
            dir0 = cd(imos_dir); % IMOS directory must be current directory for parseNetCDFTemplate
        end
        
        vfile = fullfile(platformpath, [platform '_attributes.txt']);
        vessel_data = parseNetCDFTemplate(vfile, struct);
        vorder = vessel_data;
        vessel_data.meta = struct;
        
        mfiles = dir(fullfile(platformpath, [platform '_*.txt']));
        for i = 1:length(mfiles)
            if isempty(strfind(vfile, mfiles(i).name))
                channel_data = parseNetCDFTemplate(fullfile(platformpath, mfiles(i).name), struct);
                name = mfiles(i).name;
                name(end-3:end) = ''; % .txt
                name(1:length(platform)+1) = '';
                channel_data.name = name;
                corder = channel_data;
                if isfield(vessel_data.meta, 'channels')
                    fields = fieldnames(channel_data);
                    chn = length(vessel_data.meta.channels) + 1;
                    for field = fields'
                        vessel_data.meta.channels(chn).(field{1}) = channel_data.(field{1});
                    end
                else 
                    vessel_data.meta.channels = channel_data;
                end
            end
        end      
        
        if ~isempty(dir0)
            cd(dir0);
        end
        
        vessel_data.variables = [];
        vessel_data.dimensions = [];
        
        vessel_data = review_metadata(vessel_data);
                
        vdata = rmfield(vessel_data, 'meta');
        vdata = rmfield(vdata, 'variables');
        vdata = rmfield(vdata, 'dimensions');
        
        write_metadata(vfile, vdata, vorder);
        
        if isfield(vessel_data.meta, 'channels')
            for i = 1:length(vessel_data.meta.channels)
                cfile = fullfile(platformpath, [platform '_' vessel_data.meta.channels(i).name '.txt']);
                channel_data = rmfield(vessel_data.meta.channels(i), 'name');
                write_metadata(cfile, channel_data, corder)
            end
        end      
    end

    function add_vessel(button, ~)
        % Callback to add a new vessel to the system.
        platformpath = get(button, 'User');
        parent = get(button, 'Parent');
        
        vessel_data = parseNetCDFTemplate(fullfile(platformpath, '_attributes.txt'), struct);
        vorder = vessel_data;
        
        vessel_data.meta = struct;
        channels = get(get_control(parent, 'add_channel'),'User');
        for ch = 1:length(channels);
            cbutton = get_control(parent, ['channel ' num2str(ch)]);
            if get(cbutton, 'Value') == get(cbutton, 'Max')
                channel_data = parseNetCDFTemplate(fullfile(platformpath, '_channel.txt'), struct);
                channel_data.name = get(cbutton, 'String');
                channel_data.instrument_frequency = get(cbutton, 'User');
                corder = channel_data;
                if isfield(vessel_data.meta, 'channels')
                    vessel_data.meta.channels(end+1) = channel_data;
                else 
                    vessel_data.meta.channels = channel_data;
                end
            end
        end
        
        vessel_data.variables = [];
        vessel_data.dimensions = [];
        
        vessel_data = review_metadata(vessel_data);
        
        platform = strtrim(vessel_data.ship_name);
        platform(platform == ' ') = '_';
        vfile = fullfile(platformpath, [platform '_attributes.txt']);
        if exist(vfile, 'file')
            warndlg('Vessel already exists')
            error('Vessel already exists')
        end
        
        vdata = rmfield(vessel_data, 'meta');
        vdata = rmfield(vdata, 'variables');
        vdata = rmfield(vdata, 'dimensions');
        
        write_metadata(vfile, vdata, vorder);
        
        if isfield(vessel_data.meta, 'channels')
            for i = 1:length(vessel_data.meta.channels)
                cfile = fullfile(platformpath, [platform '_' vessel_data.meta.channels(i).name '.txt']);
                channel_data = rmfield(vessel_data.meta.channels(i), 'name');
                write_metadata(cfile, channel_data, corder)
            end
        end
        
        platform_ui = get_control(parent, 'platform');
        platfrms = get(platform_ui, 'String');
        platfrms{end+1} = platform;
        set(platform_ui, 'String', platfrms);
        set(platform_ui, 'Value', length(platfrms));
        
    end

    function write_metadata(file, data, order)
        % Write the fields of data to file in the format used by parseNetCDFTemplate
        % Inputs:
        %   file    full path of file to write
        %   data    structure whose fields are to be written to file
        %   order   structure whose fields indicate the order in which to
        %           write the fields of data. 
        
        fid = fopen(file, 'w');
        
        % write out fields in the order specified by order if provided
        if nargin > 2
            fields = fieldnames(order);
            for f = 1:length(fields)
                if isfield(data, fields{f})
                    if ischar(data.(fields{f}))
                        fprintf(fid, 'S, %-40s = %s\n', fields{f}, data.(fields{f}));
                    elseif isempty(strfind(fields{f}, 'date'))
                        fprintf(fid, 'N, %-40s = %g\n', fields{f}, data.(fields{f}));
                    else
                        fprintf(fid, 'D, %-40s = %g\n', fields{f}, data.(fields{f}));
                    end
                    data = rmfield(data, fields{f});
                end
            end
        end
        
        % write out remaining fields
        fields = fieldnames(data);
        for f = 1:length(fields)
            if ischar(data.(fields{f}))
                fprintf(fid, 'S, %s = %s\n', fields{f}, data.(fields{f}));
            elseif isempty(strfind(fields{f}, 'date'))
                fprintf(fid, 'N, %s = %g\n', fields{f}, data.(fields{f}));
            else
                fprintf(fid, 'D, %s = %g\n', fields{f}, data.(fields{f}));
            end
        end
        
        fclose(fid);
    end

    function add_channel(button, ~)
        % Callback to add a new channel to the GUI. 
        channels = get(button, 'User');
        pos = get(button, 'Position');
        panel = get(button, 'Parent');
        
        answer = inputdlg({'Channel id','Frequency'}, 'New channel');
        
        if ~isempty(answer)
            channels(end + 1) = answer(1);
            freq = str2double(answer{2});
            
            chn = length(channels);
            
            uicontrol(panel, ...
                'Style',        'checkbox', ...
                'TooltipString', ['Process data for ' channels{chn} ], ...
                'Tag',          ['channel ' num2str(chn)], ...
                'String',       channels{chn}, ...
                'Value',        1, ...
                'User',         freq, ...
                'Units',        'normalized', ...
                'Position',     [0.45 + chn * 0.05 pos(2) 0.05 pos(4) ]);
            
            set(button, 'User', channels);
        end
    end

    function handle = get_control(parent, tag)
        % function to find control by tag
        
        siblings = get(parent, 'Children');
        handle = [];
        for i = 1:length(siblings)
            if strcmp(tag, get(siblings(i), 'Tag'))
                handle = siblings(i);
                return;
            end
        end       
        % if not found at this level try sub panels.
        for i = 1:length(siblings)
            if strcmp(get(siblings(i), 'Type'), 'uipanel') || ...
               strcmp(get(siblings(i), 'Type'), 'uibuttongroup')
                handle = get_control(siblings(i), tag);
                if ~isempty(handle)
                    return;
                end
            end
        end
    end

    function value = get_boolean(parent, tag)
        % function to read the boolean value from a checkbox or radiobutton
        button = get_control(parent, tag);
        value = get(button, 'Value') == get(button, 'Max');
    end

    function progress(tag, start, i, n, message)
        % Function to display progress status.
        if nargin < 2;      start = [];     end
        if nargin < 3;      i = [];         end
        if nargin < 5;      message = [];   end
        
        control = findobj('Tag', [tag ' status']);
        if ~isempty(control)
            if isempty(i)
                set(control, 'String', 'processing')
            elseif i < 0
                set(control, 'String', {'skipped'; datestr(now, 'HH:MM:SS')})
            elseif i <= n
                if isempty(start)
                    set(control, 'String', sprintf('processing %d/%d', i + 1, n));
                else
                    set(control, 'String', ...
                        {sprintf('processing %d/%d', i, n); ...
                        ['elapsed: ' datestr(toc(start)/86400, 'HH:MM:SS')]})
                end
               
            else
                set(control, 'String', {'completed at'; datestr(now, 'HH:MM:SS')})
            end
        end
        if ischar(message)
            msg = findobj('Tag', 'status');
            if ~isempty(msg)
                set(msg, 'String', message)
            end
        end
        drawnow
    end

    function start_process(button, ~)
        % function to read user input from the UI then run process_BASOOP
        % with the provided values.
        %
        % The start button passes the settings structure in its User data.
        
        parent = get(button, 'Parent');
        
        % clear progress messages
        siblings = get(parent, 'Children');
        for ui = siblings'
            tag = get(ui, 'Tag');
            if strfind(tag, 'status')
                set(ui, 'String', '');
            end
        end       
        
        % Confirm dubious settings
        setting = read_settings(button);
        
        if setting.create_ev_files
            q = questdlg('Please confirm you want to create .EV files','Confirm EV create','Overwrite','New only','No','Overwrite');
            if strcmp(q,'No')
                msgbox('Processing cancelled by user', 'Process aborted');
                return
            end
            if strcmp(q,'New only')
                setting.overwrite_ev_files = false;
            end
            
            % force user to check timeoffset if it more than 5 minutes from
            % median offset in transit_gps_file
            transit_gps_file = ...
                get(get_control(parent, 'transit gps file'), 'String');
            if exist(transit_gps_file, 'file') == 2
                offset = getOffsets(transit_gps_file);
                if ~isempty(offset)
                    off = median(offset);
                    
                    time_offset = get_control(parent, 'time offset');
                    time_unit = get_control(parent, 'time offset units');
                    tunit = get(time_unit, 'Value');
                    units = 60 ^ (3 - tunit);
                    toff = str2num(get(time_offset, 'String')) * units; %#ok<ST2NM>
                    if abs(toff(1) - off) > 300
                        checkTimeOffset(button)
                    end
                end
            end
        end
        
        if (setting.netcdf && ~setting.read_netcdf && ...
                isfield(setting.meta,'transit_start_locality') && isempty(setting.meta.transit_start_locality))  % || ...
%            (setting.sound_speed && ~setting.read_ecs && ...
%                isfield(setting.meta,'transceiver_absorption') && isempty(setting.meta.transceiver_absorption))

% To update warning message - Haris
%             q = questdlg({'Needed metadata has not been entered.' 'Pre-enter metadata now?'}, ...
%                 'Missing metadata', 'Yes', 'No', 'Yes');
            
            q = questdlg({'Needed metadata has not been entered.';''
                '(1) Please enter mandatory metadata "calibration_date" as'
                      'calibration_date = YYYY-MM-DD. When it ask'
                      'For example 2016-10-23';''
                '(2) For fishing vessel data please ensure path to the ECS file is correctly defined';''
                '(3) If motion correction is applied please specify "Yes" (Y in capital) for "data_processing_motion_correction" while reviewing metadata';''
                'Pre-enter metadata now?'}, ...
                'Missing metadata', 'Yes', 'No', 'Yes');
            if strcmp(q, 'Yes')
                setting.meta = review_metadata(setting.meta);
                set(get_control(parent,'metadata'),'User',setting.meta);
            end
        end
        
        platform = setting.platform;
        platform(platform == ' ') = '_';
        
        if setting.create_ev_files
            if isempty(strfind(setting.transit_data_files, platform))
                q = questdlg({['Platform name ' platform] 'not found in raw data file list path.' 'Is this correct?' 'Just asking'}, ...
                    'Platform not in raw data list', 'OK', 'Cancel', 'OK');
                if isempty(q) || strcmp(q, 'Cancel')
                    msgbox('Processing cancelled by user', 'Process aborted');
                    return
                end
            end            
        end
        
        if setting.read_ecs  && ~setting.create_ev_files && setting.netcdf
            q = questdlg({'Please confirm:' 'You want to read calibration settings from the .ecs file ' ...
                'in preference to getting the values from the worksheet'}, 'Read .ecs not worksheet');
            if isempty(q) || strcmp(q, 'Cancel')
                msgbox('Processing cancelled by user', 'Process aborted');
                return
            elseif strcmp(q, 'No')
                setting.read_ecs = false;
            end
        end
        
        if setting.read_ecs  && (setting.create_ev_files || setting.netcdf)
            if isempty(strfind(setting.calibration_file, platform))
                q = questdlg({['Platform name ' platform] 'not found in ecs file path.' 'Is this correct?' 'Just asking'}, ...
                    'Platform not in ecs', 'OK', 'Cancel', 'OK');
                if isempty(q) || strcmp(q, 'Cancel')
                    msgbox('Processing cancelled by user', 'Process aborted');
                    return
                end
            end            
        end
        
        if setting.read_echointegration
             if ~isempty(setting.echointegration_path) && ...
                     isempty(strfind(setting.echointegration_path, platform))
                q = questdlg({['Platform name ' platform] 'not found in echointegration path.' 'Is this correct?' 'Just asking'}, ...
                    'Platform not in path', 'OK', 'Cancel', 'OK');
                if isempty(q) || strcmp(q, 'Cancel')
                    msgbox('Processing cancelled by user', 'Process aborted');
                    return
                end
            end            
        end
        
        if setting.read_echointegration && setting.read_netcdf
            q = questdlg({'"Read echointegration" and "Read NetCDF file" both selected' 'What do you want to do?'}, ...
                'Read echointegration or NetCDF', ...
                'Read echointegration', 'Read NetCDF file', 'Copy metadata from NetCDF', ...
                'Copy metadata from NetCDF');
            if isempty(q) || strcmp(q, 'Cancel')
                msgbox('Processing cancelled by user', 'Process aborted');
                return
            elseif strcmp(q, 'Read echointegration')
                setting.read_netcdf = false;
            elseif strcmp(q, 'Read NetCDF file')
                setting.read_echointegration = false;
            elseif strcmp(q, 'Copy metadata from NetCDF')
                setting.copy_netcdf_metadata = true;
            end
        end
        
        if setting.netcdf && setting.alt_netcdf && ~isempty(setting.netcdf_directory)
            if setting.read_netcdf && isempty(fileparts(setting.netcdf_directory))
                setting.netcdf_directory = fullfile(fileparts(setting.netcdf_file), setting.netcdf_directory);
            end
            if ~exist(setting.netcdf_directory, 'dir')
                q = questdlg({'NetCDF output directory' setting.netcdf_directory ...
                    'does not exist.' 'Create it?'}, ...
                    'NetCDF directory not found', 'OK', 'Cancel', 'Cancel');
                if isempty(q) || strcmp(q, 'Cancel')
                    msgbox('Processing cancelled by user', 'Process aborted');
                    return
                end
                mkdir(setting.netcdf_directory);
            end
        end
                
        if setting.netcdf && ~setting.read_netcdf && ~setting.read_echointegration
            q = questdlg({'Write NetCDF selected but neither echointegration or netcdf read.' ...
                'There will be nothing to write.' 'Continue but skip writing of NetCDF?' }, ...
                'Write NetCDF without read', 'OK', 'Cancel', 'Cancel');
            if isempty(q) || strcmp(q, 'Cancel')
                msgbox('Processing cancelled by user', 'Process aborted');
                return
            else 
                setting.netcdf = false;
            end
        end
                
        % cursory check for processing without saving the results
        % bundling an existing netcdf in an imos zip is ok.
        if  (setting.read_echointegration && ~setting.netcdf) || ...
            (setting.read_netcdf && (setting.sound_speed || setting.layer_indices) && ~setting.netcdf) || ...    
            (setting.read_netcdf && ~(setting.netcdf || setting.make_imos || setting.imos_upload))
            q = questdlg({'Reading echointegration or netcdf without writing anything.' ...
                'Are you just viewing or do you want to write a NetCDF file?'  }, ...
                'Read without writing NetCDF', 'Write NetCDF', 'View only', 'View only');
            if strcmp(q, 'Write NetCDF')
                setting.netcdf = true;
            end
        end
        
        % run the processing
        try
            start_time=tic;        
            
            results = process_BASOOP(setting);
            telapsed = toc(start_time);
            message = sprintf('Program completed in %.1f minutes\n', (telapsed)/60);
            msgbox(message, 'process_BASOOP completed successfully')
            if setting.create_ev_files
                set(get_control(parent, 'alt ev files'), 'String', results.alt_ev_files);
            end
            if setting.netcdf
                netcdf_file_ui = get_control(parent, 'netcdf file');
                set(netcdf_file_ui, 'String', results.netcdf_output);
                files = get(netcdf_file_ui, 'User');
                set(netcdf_file_ui, 'User', [ {results.netcdf_output} files]);
            end
 
        catch exception
            progress('', 0, 1, 1, [datestr(now, 'HH:MM:SS') ' ERROR: ' exception.message]);
            
            setting.error = exception;
            setting.matlab_path = path;
            setting.progress = [];          % don't save reference to transient function
            setting.upload_password = [];
            pth = fileparts(which('GUI'));
            if isdir(fullfile(pth, 'log'))
                save(fullfile(pth, 'log',['Error_' datestr(now,'yyyymmdd-HHMMSS') '_' getenv('USER') getenv('UserName')]), ...
                    '-struct', 'setting');
            end
            
            warndlg(exception.message, 'process_BASOOP failed:');
            rethrow(exception)
        end
    end

 
    function save_settings(button, ~)        
        % Call back function for the save button.
        % This writes the current settings of the GUI to the requested
        % file.        
        settings = read_settings(button);                                    
        settings.progress = [];
        settings.upload_progress = [];        
        [filename,spath] = uiputfile(fullfile(fileparts(mfilename('fullpath')), 'save', '*.mat')); % Restrict save to just mat format. TER 07/08/2017
        % [filename,spath] = uiputfile(fullfile(fileparts(mfilename('fullpath')), 'save', ''));
        if filename ~= 0            
            
            if isstruct(settings)
               save(fullfile(spath, filename), 'settings'); % added as setting is already a structure was not getting saved as a variable called 'setting'
            else
               save(fullfile(spath, filename), '-struct', 'settings');
            end
            % save(fullfile(spath, filename), '-struct', 'setting'); this
            % doesn't save the setting variable - why not???
        end;                               
        
        
    end
    
    function start_reprocess(button, ~)
        % Call back function for the save button.
        % This writes the current settings of the GUI to the requested
        % file.                
        setting = read_settings(button);            
        ncdir = setting.netcdf_file;
        if exist(ncdir, 'dir') ~= 7
            ncdir = fileparts(ncdir);
        end
        [files,pth] = uigetfile(fullfile(ncdir,'*.nc'),'NetCDF files to reprocess','multiselect','on');
        % edited by Tim Ryan to set read_netcdf to 1 - assumption is that
        % if reprocessing then there will be a netcdf file that will need
        % to be read. 9/5/2018
        if isequal(setting.read_netcdf,0)
            fprintf('Warning read netcdf checkbox was set to 0. we need to set this to 1 when reprocessing\n');
            setting.read_netcdf = 1; 
        end
        
        if isequal(files,0)
            return
        end
        if ischar(files)
            files = {files};
        end        
        for i = 1:length(files)
            infile = fullfile(pth,files{i});               
            reprocessev(setting, infile, setting.netcdf_directory)
        end
    end

    function echointegrate(button, ~)
        % Dialog to allow the user to select a number of ev file lists to
        % batch process the long echointegration step.
        % This method calls export_sv() directly, bypassing process_BASOOP.
        setting = read_settings(button);
        setting.export_sv = true;
        evlist = {};
        if exist(setting.alt_ev_files, 'file') ==2
            evlist{1} = setting.alt_ev_files;
        end
        
        eifig = figure('Name', 'Batch echointegration', 'NumberTitle', 'off');
        eipanel = uipanel(eifig);
        eilist = uicontrol(eipanel, ...
            'Style',        'listbox', ...
            'TooltipString', 'Lists of ev files to echointegrate', ...
            'Tag',          'echointegrate list', ...
            'String',       evlist, ...
            'User',         setting, ...
            'Min',          0, ...
            'Max',          100, ...
            'Units',        'normalized', ...
            'Position',     [0 0.2 1 0.8]);
    
        uicontrol(eipanel, ...
            'Style',        'pushbutton', ...
            'TooltipString', 'Add ev filelist to list of filelists to echointegrate', ...
            'Tag',          'ei add', ...
            'String',       'Add', ...
            'User',         eilist, ...
            'Callback',     @ei_add, ...
            'Units',        'normalized', ...
            'Position',     [ 0.05 0.05 0.15 0.1 ]);
        
        uicontrol(eipanel, ...
            'Style',        'pushbutton', ...
            'TooltipString', 'Remove selected filelists', ...
            'Tag',          'ei remove', ...
            'String',       'Remove', ...
            'User',         eilist, ...
            'Callback',     @ei_remove, ...
            'Units',        'normalized', ...
            'Position',     [ 0.25 0.05 0.15 0.1 ]);
        
        uicontrol(eipanel, ...
            'Style',        'pushbutton', ...
            'TooltipString', 'Echointegrate all evfiles in list', ...
            'Tag',          'ei echointegrate', ...
            'String',       'Echointegrate', ...
            'User',         eilist, ...
            'Callback',     @ei_echointegrate, ...
            'Units',        'normalized', ...
            'Position',     [ 0.5 0.05 0.25 0.1 ]);

        uicontrol(eipanel, ...
            'Style',        'pushbutton', ...
            'TooltipString', 'Cancel', ...
            'Tag',          'ei cancel', ...
            'String',       'Cancel', ...
            'Callback',     @ei_cancel, ...
            'Units',        'normalized', ...
            'Position',     [ 0.8 0.05 0.15 0.1 ]);
    end

    function ei_add(button, ~)
        eilist = get(button, 'User');
        lists = get(eilist, 'String');
        if isempty(lists)
            dfault = '';
        else
            dfault = lists{end};
        end
        
        [files,pth] = uigetfile('*.txt','EV file lists',dfault,'MultiSelect','on');
        if ischar(files)
            lists{end+1} = fullfile(pth,files);
        elseif iscell(files)
            lists = [ lists fullfile(pth, files)'];
        end
        set(eilist, 'String', lists);
    end

    function ei_remove(button, ~)
        eilist = get(button, 'User');
        lists = get(eilist, 'String');
        rm = get(eilist, 'Value');
        lists(rm) = [];
        set(eilist, 'Value', []);
        set(eilist, 'String', lists);
    end

    function ei_echointegrate(button, ~)
        eilist = get(button, 'User');
        lists = get(eilist, 'String');
        setting = get(eilist, 'User');
        
        close(get(get(button, 'Parent'), 'Parent'));
        drawnow;
        
        for i = 1: length(lists);
            try
                fid = fopen(lists{i},'r');
                datafilelist = textscan(fid,'%q', ...
                    'commentStyle', '#', ...
                    'delimiter', '');
                fclose(fid);
                
                fprintf('%s Echointegration %s\n', datestr(now, 'yyyy-mm-dd HH:MM:SS'), lists{i});
                export_sv([], setting, datafilelist{1});
            catch exception
                fprintf('Error at %s line %d because of:\n%s\n', ...
                    exception.stack(1).file, exception.stack(1).line, exception.message);
                fprintf('type "return" and press Enter to continue\n');
                keyboard
            end
        end
        fprintf('%s Echointegration complete!\n', datestr(now, 'yyyy-mm-dd HH:MM:SS'));
    end

    function ei_cancel(button, ~)
        close(get(get(button, 'Parent'), 'Parent'));
    end

    function quit(~, ~)
        % Call back function for the quit button.
        close(gcf);
    end

    function help(~, ~)
        % Call back function for the quit button.
        winopen('Q:\IMOS_BASOOP\IMOS processing.docx')        
    end
 
    function setting = read_settings(button)
        % Returns the current setting of the GUI.
        % The input button can be any uicontrol in the main_panel of the
        % GUI whose 'User' data is a settings structure, 
        % e.g. Start and Save buttons.        
        setting = get(button, 'User');
        parent = get(button, 'Parent');
        
        % collect settings from user input
        
        % files
        if ~iscell(setting.transit_data_files)
            setting.transit_data_files = [];
        end
        setting.template = ...
            get(get_control(parent, 'Echoview template'), 'String');
        setting.transit_data_files{1} = ...
            get(get_control(parent, 'transit data files'), 'String');
        setting.transit_data_files{2} = ...
            get(get_control(parent, '12 kHz data files'), 'String');
        setting.transit_gps_file = ...
            get(get_control(parent, 'transit gps file'), 'String');
        setting.transit_pitch_file = ...
            get(get_control(parent, 'transit pitch file'), 'String');
        setting.transit_roll_file = ...
            get(get_control(parent, 'transit roll file'), 'String');
        setting.alt_ev_dir = ...
            get(get_control(parent, 'alt ev dir'), 'String');
        setting.alt_ev_files = ...
            get(get_control(parent, 'alt ev files'), 'String');
        setting.echointegration_path = ...
            get(get_control(parent, 'echointegration path'), 'String');
        setting.merge_file = ...
            get(get_control(parent, 'merge file'), 'String');
        setting.parse_file = ...
            get(get_control(parent, 'parse file'), 'String');
        setting.netcdf_file = ...
            get(get_control(parent, 'netcdf file'), 'String');
        setting.calibration_file = ...
            get(get_control(parent, 'calibration file'), 'String');
        setting.voyage_inf = ...
            get(get_control(parent, 'inf file'), 'String');
        setting.metadata_file = ...
            get(get_control(parent, 'metadata file'), 'String');
        setting.netcdf_directory = ...
            get(get_control(parent, 'netcdf directory'), 'String');
        setting.ex_netcdf_directory = ...
            get(get_control(parent, 'extended netcdf directory'), 'String');
        
        % numerics
        setting.time_block = ...
            str2double(get(get_control(parent, 'time block'), 'String'));
        if isnan(setting.time_block) || setting.time_block < 0
            % TODO display message dialog
            warndlg('Can''t understand time block, must be a valid number');
            error('Can''t understand time block, must be a valid number');
        end
        setting.time_offset = ...
            str2num(get(get_control(parent, 'time offset'), 'String')); %#ok<ST2NM>
        if isempty(setting.time_offset)
            warndlg('Can''t understand time offset, must be a valid number');
            error('Can''t understand time offset, must be a valid number');
        end
        setting.time_offset = setting.time_offset * ...
            60 ^ (3 - get(get_control(parent, 'time offset units'), 'Value'));
        setting.fixed_layer = ...
            str2double(get(get_control(parent, 'fixed layer'), 'String'));
        if isnan(setting.fixed_layer)
            warndlg('Can''t understand DSL fixed layer depth, must be a valid number');
            error('Can''t understand DSL fixed layer depth, must be a valid number');
        end
        setting.Grid_height = ...
            str2double(get(get_control(parent, 'grid height'), 'String'));
        if isnan(setting.Grid_height)
            warndlg('Can''t understand grid height, must be a valid number');
            error('Can''t understand grid height, must be a valid number');
        end
        setting.Grid_distance = ...
            str2double(get(get_control(parent, 'grid distance'), 'String'));
        if isnan(setting.Grid_distance)
            warndlg('Can''t understand grid distance, must be a valid number');
            error('Can''t understand grid distance, must be a valid number');
        end
        
        
        % checkboxes
        setting.create_ev_files = get_boolean(parent, 'create_ev_files');
        setting.skip_ev_files = get_boolean(parent, 'read netcdf');
        setting.review_ev_files = get_boolean(parent, 'review_ev_files');
        setting.export_import_HAC = get_boolean(parent, 'export_import_HAC');
        setting.export_HAC = get_boolean(parent, 'export_HAC');
        setting.import_HAC = get_boolean(parent, 'import_HAC');
        setting.export_sv = get_boolean(parent, 'export_sv');
        setting.export_sv_fast = get_boolean(parent, 'export_sv_fast');
        setting.read_echointegration = get_boolean(parent, 'read echointegration');
        setting.merge = get_boolean(parent, 'merge');
        setting.read_merge = get_boolean(parent, 'read merge');
        setting.read_netcdf = get_boolean(parent, 'read netcdf');
        setting.read_ecs = get_boolean(parent, 'read ecs');
        setting.read_inf = get_boolean(parent, 'read inf');
        setting.read_meta = get_boolean(parent, 'read metadata');
        setting.synTS = get_boolean(parent, 'synTS');
        setting.CARS = get_boolean(parent, 'CARS');
        setting.npp = get_boolean(parent, 'npp');
        setting.layer_indices = get_boolean(parent, 'layer_indices');
        setting.sound_speed = get_boolean(parent, 'sound_speed');
        setting.netcdf = get_boolean(parent, 'netcdf');
        setting.viz = get_boolean(parent, 'viz');
        setting.detect_seafloor = get_boolean(parent, 'detect_seafloor');
        setting.detect_upper_DSL = get_boolean(parent, 'detect_upper_DSL');
        setting.detect_fixed = get_boolean(parent, 'detect_fixed');
        setting.create_alt_ev_files = get_boolean(parent, 'create_alt_ev_files');
        setting.include_pitch = get_boolean(parent, 'include_pitch');
        setting.include_roll = get_boolean(parent, 'include_roll');
        %setting.use_alt_ev_files = get_boolean(parent, 'use_alt_ev_files');
        setting.export_reference = get_boolean(parent, 'export_reference');
        setting.export_final = get_boolean(parent, 'export_final');
        setting.export_reject = get_boolean(parent, 'export_reject');
        setting.export_noise = get_boolean(parent, 'export_noise');
        setting.export_background = get_boolean(parent, 'export_background');
        setting.extended = get_boolean(parent, 'extended netcdf');
        setting.single_format = ~get_boolean(parent, 'single format');         % check box has opposite meaning
        setting.review_metadata = get_boolean(parent, 'review metadata');
        setting.review_priority_metadata = get_boolean(parent, 'review priority metadata');
        setting.matlab_view = get_boolean(parent, 'matlab_view');
        setting.zap = get_boolean(parent, 'zap');
        setting.alt_netcdf = get_boolean(parent, 'alt netcdf');
        setting.make_imos = get_boolean(parent, 'make_imos');
        setting.raw_echoview = get_boolean(parent, 'raw echoview');
        setting.raw_datalist = get_boolean(parent, 'raw datalist');
        setting.raw_none = get_boolean(parent, 'raw none');
        setting.imos_upload = get_boolean(parent, 'imos_upload');
      
        setting.HAC = [];
        for h = 1:5
            if  get_boolean(parent, ['HAC' num2str(h)])
                setting.HAC(end+1) = h;
            end
        end
        
        if  get_boolean(parent, 'speed_coppens')
            setting.soundspeed_formula = 'Coppens';
        end
        if  get_boolean(parent, 'speed_mackenzie')
            setting.soundspeed_formula = 'Mackenzie';
        end
        if  get_boolean(parent, 'speed_gsw')
            setting.soundspeed_formula = 'GSW';
        end
        if  get_boolean(parent, 'absorption_francois')
            setting.soundabsorption_formula = 'Francois';
        end
        if  get_boolean(parent, 'absorption_doonan')
            setting.soundabsorption_formula = 'Doonan';
        end

        setting.channels = get(get_control(parent, 'add_channel'),'User');
        setting.channel = {};
        setting.frequency = [];
        for ch = 1:length(setting.channels);
            button = get_control(parent, ['channel ' num2str(ch)]);
            setting.frequencies(ch) = get(button, 'User');
            if get(button, 'Value') == get(button, 'Max')
                setting.channel{end + 1} = get(button, 'String');
                setting.frequency(length(setting.channel)) = get(button, 'User');
            end
        end
        
        % popupmenus
        platform =  get_control(parent, 'platform');
        platfrms = get(platform, 'String');
        setting.platform = platfrms{get(platform, 'Value')};

        % metadata
        setting.meta = get(get_control(parent, 'metadata'), 'User');
        setting.meta.transit_start_locality = get(get_control(parent, 'transit start'), 'String');
        setting.meta.transit_end_locality = get(get_control(parent, 'transit end'), 'String');
        if exist(setting.template, 'file')
            setting.meta.Echoview_template = setting.template;
        end
        
        % progress callback
        setting.progress=@progress;       
    end

end